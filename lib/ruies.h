/* 
 * ruies.h is a simple header-only library that adds some ui elements to 
 * 
 * be used in raylib applications
 *                                                      GITHUB
 *     Created by: KryonicNapkin        - https://www.github.com/KryonicNapkin/rlui_elems
 *     Credit: raysan5's raygui library - https://www.github.com/raysan5/raygui
 */
/* NOTE: To use this library you NEED to have raylib.h included prior */

/* 
 * TODO: 1. Make more elements (
 *              CheckBox, 
 *              OptionList, 
 *              Slider, 
 *              ProgressBar, 
 *              WindowBox,  -- In progress
 *              TabPane, 
 *              TitlebarButtons, 
 *              HeaderBar,
 *              ...
 *          )
 *       2. Rework the style system (
 *              Loading a custom style for different Elements,
 *              Do something with fonts,
 *              
 *          )
 *
 *
 */

/* ELEMENTS include: Button, Button grid, Titlebar, Toggle, Label */

#ifndef RUIES_H_
#define RUIES_H_

#include <stdint.h>                     /* For type compatibility */

#ifndef USE_CUSTOM_FONT
/* Default font */

////////////////////////////////////////////////////////////////////////////////////////                                                                                    //
//                                                                                    //
// Font name:    PixeloidSans-mLxMn.ttf                                               //
// Font creator: GGBotNet                                                             //
// Font LICENSE: font/License.txt                                                     //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

#define COMPRESSED_DATA_SIZE_FONT_TEST 6688

// Font image pixels data compressed (DEFLATE)
// NOTE: Original pixel data simplified to GRAYSCALE
static unsigned char default_font_data[COMPRESSED_DATA_SIZE_FONT_TEST] = { 0xed,
    0x9d, 0x3f, 0x88, 0x1b, 0x47, 0xdf, 0xc7, 0x85, 0x31, 0xc1, 0x70, 0x98, 0x70, 0x98, 0xe3, 0xb8, 0x26, 0x84, 0x2b, 0x5c,
    0x1c, 0x41, 0x8d, 0x49, 0x11, 0x82, 0x09, 0x0f, 0x86, 0x2b, 0x82, 0x0b, 0x17, 0x47, 0x20, 0x98, 0xc3, 0x45, 0x30, 0xc1,
    0x9d, 0x09, 0xe2, 0x38, 0x4c, 0x30, 0x18, 0x63, 0xcc, 0x21, 0x42, 0x9a, 0x23, 0x18, 0x93, 0x22, 0x88, 0x10, 0x30, 0x2e,
    0x5c, 0x98, 0x14, 0x82, 0x17, 0x13, 0xcc, 0x4b, 0x8a, 0x97, 0x34, 0xe2, 0xb8, 0xc2, 0x85, 0x79, 0x78, 0x1a, 0x23, 0x8c,
    0x09, 0xc6, 0x04, 0x5e, 0x82, 0x09, 0xdf, 0x87, 0x59, 0x69, 0xa4, 0x5d, 0xef, 0xfc, 0xf9, 0xcd, 0xee, 0xec, 0x6a, 0x25,
    0x7d, 0xef, 0x53, 0xe9, 0x34, 0x9a, 0x9d, 0x99, 0x9d, 0xef, 0xee, 0xcc, 0x6f, 0x67, 0xe7, 0x8b, 0x16, 0x21, 0x84, 0x10,
    0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x5a, 0x18, 0x62, 0x88, 0xcf, 0xac, 0xff, 0xbd, 0x86, 0x21, 0x9e, 0x18, 0x7f,
    0xf7, 0x00, 0x43, 0xdc, 0x44, 0x0b, 0x5b, 0x49, 0xda, 0x35, 0xe7, 0x31, 0xd6, 0xd0, 0xc6, 0x59, 0x4f, 0x19, 0x86, 0xe3,
    0xfc, 0x46, 0x1c, 0x61, 0x88, 0x1d, 0xe7, 0x71, 0xc3, 0xeb, 0xa4, 0x31, 0xd7, 0xc9, 0xfd, 0x1b, 0x7f, 0x7b, 0x5c, 0xc0,
    0x2e, 0xce, 0x19, 0xbf, 0xd9, 0xc6, 0x36, 0xce, 0xe4, 0xfe, 0xbb, 0x9e, 0xe2, 0x8c, 0xf0, 0x37, 0x79, 0xdc, 0xed, 0x34,
    0x65, 0xcd, 0xd9, 0xee, 0x43, 0x6b, 0xad, 0xc2, 0xf2, 0x0b, 0x49, 0xa7, 0xd9, 0x12, 0x96, 0x6f, 0x4a, 0x9c, 0xfa, 0xc6,
    0xc8, 0x4f, 0x9a, 0x6e, 0x17, 0xbb, 0xd8, 0x10, 0xfe, 0x57, 0xf3, 0x39, 0x7a, 0xb8, 0x63, 0xfc, 0x8d, 0xe6, 0x62, 0x14,
    0xfd, 0xab, 0xbf, 0x6d, 0xeb, 0x7f, 0x3b, 0x00, 0x06, 0xc6, 0xdf, 0xf5, 0x01, 0x74, 0xd1, 0x42, 0x3b, 0x49, 0xbb, 0xee,
    0x3c, 0x86, 0x3d, 0x97, 0xe9, 0xd1, 0x30, 0xce, 0x4f, 0x9f, 0x29, 0x60, 0xd7, 0x79, 0xdc, 0xf0, 0x3a, 0xb9, 0x4b, 0xe3,
    0xfe, 0x8d, 0xbc, 0x3d, 0x42, 0x5a, 0x58, 0xff, 0x85, 0x96, 0xa6, 0x25, 0x6c, 0xa7, 0xe9, 0xdf, 0xba, 0xb3, 0xdd, 0xe1,
    0x39, 0x3f, 0xd2, 0xfc, 0x42, 0xd2, 0x69, 0xda, 0xc2, 0xf2, 0x4d, 0xff, 0xe2, 0xd4, 0x37, 0x46, 0x7e, 0x21, 0xc7, 0xdd,
    0x8e, 0xd6, 0x4b, 0xa5, 0x67, 0xac, 0x3a, 0xfd, 0xf7, 0xd0, 0xc3, 0x0b, 0x00, 0xc7, 0xe8, 0xe1, 0x71, 0x92, 0xf6, 0x21,
    0x7a, 0xf8, 0xb4, 0x72, 0xfd, 0xab, 0xe3, 0x5e, 0xc7, 0x2e, 0xbe, 0x35, 0x5e, 0x1b, 0x25, 0x2d, 0xbb, 0x87, 0x1e, 0x6e,
    0x1b, 0xaf, 0x9d, 0xea, 0x8a, 0xfa, 0x3d, 0x7a, 0xf8, 0xd2, 0x7a, 0x05, 0xff, 0xde, 0xfa, 0x5b, 0x75, 0x0f, 0xff, 0x0d,
    0xc0, 0x0f, 0xc6, 0x7b, 0x79, 0xfd, 0xfa, 0xd7, 0xed, 0x34, 0xe5, 0x47, 0xe3, 0xf9, 0xd1, 0xdf, 0xfe, 0xe2, 0x39, 0x3f,
    0xd2, 0xfc, 0xa4, 0xe9, 0xd2, 0xf7, 0xb8, 0xc7, 0x1e, 0xdd, 0x1c, 0x64, 0xf2, 0x53, 0x6c, 0x96, 0xae, 0xef, 0x94, 0xd7,
    0xa5, 0xda, 0x4f, 0x9a, 0xce, 0x3d, 0xc6, 0x36, 0x8f, 0x25, 0xcd, 0x7d, 0x3c, 0x64, 0xc4, 0x56, 0x9d, 0xfe, 0x43, 0xae,
    0xa3, 0x6a, 0x7c, 0xf4, 0x06, 0xc0, 0x5b, 0xc7, 0xf8, 0x48, 0xaa, 0x7f, 0xff, 0x5d, 0xd8, 0xa7, 0x1e, 0xf7, 0xe8, 0xa1,
    0xe8, 0xb7, 0x45, 0xb4, 0xdc, 0x4e, 0x71, 0xb6, 0xc4, 0xec, 0xcd, 0xd5, 0x4e, 0x92, 0x71, 0x42, 0xab, 0x50, 0x7b, 0xc6,
    0x3b, 0x6e, 0xf8, 0x7d, 0xb3, 0x55, 0xfa, 0xb8, 0xb1, 0xea, 0x51, 0xfc, 0xb8, 0xfe, 0xb1, 0x56, 0xb7, 0xa6, 0xf9, 0xbf,
    0xb9, 0x8d, 0xd5, 0x95, 0xed, 0x23, 0xeb, 0x2c, 0x24, 0xe4, 0xfe, 0x2f, 0x19, 0x1f, 0xf5, 0xc6, 0xa8, 0x7b, 0xef, 0xaa,
    0xe3, 0x3a, 0x2a, 0xd5, 0xbf, 0x2e, 0x7d, 0xc8, 0x1d, 0x5e, 0x36, 0x3a, 0x30, 0x7f, 0x1b, 0xe7, 0x5e, 0x1e, 0x86, 0xa4,
    0x9d, 0x62, 0xe9, 0x3f, 0xdf, 0x9e, 0xf6, 0x71, 0xc7, 0x47, 0xc2, 0xe3, 0xea, 0x7b, 0xdc, 0xe3, 0x4a, 0xf4, 0x7f, 0xe8,
    0x1c, 0x77, 0x34, 0x59, 0xff, 0x6a, 0x2c, 0xf9, 0x48, 0x10, 0xe3, 0xaa, 0x56, 0xff, 0xf2, 0x6b, 0x54, 0xdb, 0xa3, 0xeb,
    0xeb, 0xe3, 0xf1, 0xe5, 0x7f, 0x04, 0xe3, 0x41, 0xc9, 0x7c, 0x50, 0xa2, 0xff, 0x32, 0x35, 0x75, 0x47, 0x07, 0xcc, 0xdf,
    0xaa, 0x7b, 0xf8, 0xef, 0x00, 0x7e, 0x32, 0xde, 0xcb, 0xa5, 0xb1, 0xbc, 0x30, 0xda, 0x41, 0xba, 0x29, 0xa7, 0xff, 0x90,
    0xb8, 0x43, 0x48, 0x7c, 0xa2, 0x1b, 0x5c, 0x8f, 0xb8, 0x7d, 0xb8, 0x89, 0xfa, 0x77, 0xd7, 0x65, 0x90, 0xe2, 0x61, 0xe3,
    0xf5, 0x9f, 0x57, 0x8d, 0xbb, 0x7d, 0x56, 0xb0, 0x8e, 0xf3, 0x9e, 0xf8, 0xed, 0x25, 0xac, 0x63, 0xaf, 0xd0, 0xec, 0xa7,
    0x8c, 0xfe, 0xfd, 0xf1, 0xff, 0x3a, 0xc7, 0x6c, 0xbe, 0x76, 0xd2, 0x35, 0x5d, 0x99, 0xc4, 0x23, 0xe2, 0xe9, 0xff, 0x64,
    0x72, 0x87, 0x3a, 0xb6, 0xc6, 0xcd, 0x75, 0xf9, 0xd6, 0x1d, 0xe9, 0xd2, 0xf7, 0x38, 0x5f, 0xff, 0xf9, 0x22, 0xf3, 0xa4,
    0xe4, 0x44, 0xa9, 0x74, 0xd2, 0x7a, 0xe8, 0x7e, 0xb6, 0xee, 0xa9, 0x47, 0x3e, 0xdd, 0xcb, 0x8a, 0xf5, 0x5f, 0x57, 0xfc,
    0xaf, 0x2a, 0xfd, 0x1f, 0x96, 0x8a, 0x13, 0x96, 0xd3, 0x59, 0x19, 0xfd, 0xfb, 0xd9, 0x41, 0xc7, 0xf1, 0xfc, 0x30, 0x2e,
    0xd2, 0xf9, 0xba, 0xf4, 0xba, 0x1b, 0x52, 0x67, 0xe9, 0xf3, 0x1e, 0xe9, 0xbc, 0x3e, 0x2c, 0xfe, 0x5f, 0x2e, 0x5d, 0x48,
    0x3d, 0x8a, 0xc5, 0xff, 0x51, 0x5a, 0xff, 0x6a, 0x2c, 0xf9, 0x33, 0x06, 0xf8, 0xc6, 0xd2, 0xb2, 0x53, 0xae, 0xcc, 0xa1,
    0xfe, 0xcb, 0x6b, 0xaf, 0xa9, 0xfa, 0xaf, 0x13, 0xea, 0x7f, 0x71, 0xf5, 0xdf, 0x8c, 0xf8, 0x5f, 0x1c, 0xfd, 0xeb, 0xf1,
    0xd1, 0xad, 0x24, 0x56, 0xe8, 0x1e, 0x97, 0xdd, 0xc3, 0x00, 0x77, 0x3d, 0xb1, 0x70, 0x35, 0xeb, 0xb9, 0x8c, 0x36, 0xf6,
    0x27, 0xb3, 0x9f, 0x27, 0x18, 0x88, 0xd7, 0x41, 0x2c, 0x86, 0xfe, 0x25, 0xed, 0xa4, 0x6b, 0x3a, 0x5d, 0x77, 0x15, 0x47,
    0xff, 0x57, 0x30, 0xc0, 0xe3, 0xe4, 0x0e, 0x75, 0xd2, 0xbb, 0xde, 0x6b, 0xc4, 0x53, 0xe3, 0xf9, 0x51, 0x7f, 0xcf, 0xc7,
    0xb3, 0xd8, 0x67, 0xc9, 0xa7, 0x63, 0x63, 0xba, 0x76, 0x0e, 0x7b, 0x7e, 0x5f, 0x0b, 0xd2, 0x49, 0xeb, 0xa1, 0xfb, 0x99,
    0x24, 0xbf, 0xcd, 0x4c, 0xba, 0x57, 0xc6, 0x76, 0x36, 0x47, 0x80, 0xec, 0x71, 0x21, 0x35, 0x96, 0xbc, 0x89, 0xae, 0x65,
    0x0c, 0x30, 0x3f, 0xfa, 0x0f, 0xbd, 0x8e, 0x4a, 0xd7, 0xf5, 0x48, 0xef, 0x6b, 0x8b, 0xa8, 0xff, 0x62, 0xeb, 0x9f, 0xe2,
    0xe8, 0x3f, 0x56, 0x9c, 0x30, 0xe4, 0xf9, 0x71, 0x93, 0x9f, 0x77, 0x16, 0x2f, 0x5f, 0xd1, 0xf5, 0x3f, 0x55, 0x8c, 0x25,
    0x3b, 0xf8, 0x30, 0xf0, 0x37, 0x5d, 0x74, 0xf1, 0x6f, 0x00, 0xff, 0x87, 0x2e, 0x7e, 0x4a, 0xea, 0xf1, 0x03, 0xba, 0x96,
    0xd5, 0xaf, 0x12, 0xfd, 0xab, 0xfc, 0x6e, 0x8c, 0xe7, 0xcf, 0x1b, 0xc9, 0xa7, 0xae, 0x31, 0x3f, 0xdd, 0x62, 0x1f, 0xa3,
    0x83, 0xfd, 0x24, 0xcd, 0x1e, 0x3a, 0xd8, 0x5a, 0x1a, 0xfd, 0xa7, 0xdb, 0xa9, 0x6e, 0xfd, 0x5f, 0x45, 0x17, 0xb7, 0x3c,
    0xb3, 0x4e, 0x55, 0xbe, 0xb3, 0x82, 0xe3, 0xa6, 0x67, 0xb1, 0xdf, 0x25, 0xa5, 0xbd, 0x65, 0x3c, 0x8f, 0xd2, 0xfc, 0x42,
    0xea, 0x2b, 0xa9, 0x87, 0x34, 0xbf, 0xe2, 0xe5, 0xf3, 0xf7, 0xc7, 0x1d, 0xf4, 0x71, 0xaf, 0xa1, 0xfd, 0x30, 0xe4, 0xfa,
    0xad, 0xc6, 0x47, 0xea, 0x1c, 0x3f, 0xf3, 0x8c, 0xdf, 0xb2, 0xf3, 0x41, 0x78, 0xdb, 0xb1, 0x2d, 0x9c, 0xe7, 0x2d, 0x92,
    0xfe, 0xab, 0x5a, 0x0f, 0x13, 0x2b, 0xee, 0x52, 0xe4, 0xbe, 0x19, 0xe3, 0x39, 0x66, 0xc8, 0x71, 0x63, 0xd6, 0xa3, 0xdc,
    0xf3, 0xbf, 0x6a, 0xd6, 0x85, 0x84, 0x52, 0xe4, 0xe9, 0x74, 0x1f, 0xfd, 0x64, 0xa6, 0xf3, 0x6f, 0xf4, 0x93, 0xe7, 0xde,
    0xc0, 0x6f, 0xe8, 0xe3, 0x82, 0xa0, 0x7f, 0x0d, 0x85, 0xba, 0x36, 0xeb, 0x5f, 0x1d, 0xf7, 0x6a, 0x52, 0xe2, 0x6d, 0x5c,
    0x4e, 0x3e, 0x5d, 0xc2, 0xb6, 0xe3, 0x1d, 0x0a, 0xf3, 0xaf, 0xed, 0x33, 0xe7, 0x73, 0xd8, 0xc6, 0x8d, 0x86, 0x5f, 0x77,
    0xb7, 0x03, 0x6a, 0x3a, 0xe5, 0x91, 0xf1, 0xfc, 0xe8, 0x6f, 0xef, 0x27, 0xf3, 0x71, 0xfd, 0x69, 0xc3, 0x98, 0xee, 0x8f,
    0x64, 0x95, 0x57, 0x3a, 0xcf, 0x8d, 0xc2, 0xc7, 0x95, 0xea, 0x5f, 0x9a, 0x5f, 0x48, 0x7d, 0xef, 0x27, 0x69, 0xe3, 0xb4,
    0x5f, 0x91, 0xfa, 0x36, 0x4d, 0xff, 0x55, 0xce, 0xff, 0xf5, 0xf8, 0x28, 0x96, 0xfe, 0xd3, 0xf3, 0x89, 0x41, 0xa1, 0xf5,
    0x16, 0x65, 0xd6, 0xff, 0xce, 0x8f, 0xfe, 0x63, 0xbf, 0x0f, 0x53, 0xc5, 0x7b, 0x33, 0xd5, 0xc6, 0xe1, 0xd7, 0x6b, 0x69,
    0xbf, 0x22, 0xf5, 0xad, 0x7a, 0x5d, 0xd8, 0x3c, 0xae, 0xff, 0xa1, 0xfe, 0xa9, 0xff, 0xe5, 0xd3, 0xff, 0xe2, 0xa3, 0xc7,
    0x47, 0xd3, 0xf1, 0x65, 0xc8, 0xf8, 0xa8, 0xde, 0xa7, 0xe7, 0xcd, 0x18, 0x8d, 0x11, 0xb2, 0x68, 0xd7, 0x80, 0xa6, 0x5d,
    0x1f, 0xa9, 0x7f, 0x42, 0x96, 0x57, 0xff, 0x1f, 0x62, 0x1b, 0x9f, 0x34, 0x74, 0x36, 0x46, 0xc8, 0xe2, 0x31, 0x0f, 0x6b,
    0x6a, 0x09, 0x21, 0xd4, 0x3f, 0x21, 0xa4, 0x8e, 0x11, 0x37, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08,
    0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0xd2,
    0x98, 0xfd, 0x30, 0xd3, 0x3c, 0xc8, 0x38, 0x0b, 0xdb, 0xdd, 0xb7, 0xf2, 0xd8, 0x5d, 0xa0, 0xae, 0x79, 0x5c, 0xba, 0xf2,
    0x79, 0xad, 0x45, 0x2b, 0x5f, 0xd8, 0x71, 0x87, 0x56, 0x77, 0x27, 0x69, 0x7d, 0xa5, 0xe5, 0xcb, 0xee, 0xdc, 0x7b, 0xe4,
    0x3d, 0xae, 0xdb, 0xe5, 0x6c, 0xcb, 0x72, 0xb4, 0x90, 0x23, 0x49, 0x3c, 0x8b, 0xec, 0xe9, 0x76, 0x30, 0xc4, 0x91, 0xb5,
    0x06, 0x59, 0x0f, 0xcb, 0x43, 0x0c, 0x71, 0x18, 0xb1, 0xf7, 0xad, 0x45, 0xee, 0xcd, 0x6b, 0xb5, 0xa8, 0xa3, 0xf8, 0xb9,
    0x39, 0x72, 0xaa, 0xcd, 0x85, 0x7f, 0x6f, 0x8b, 0x98, 0xbb, 0x45, 0x49, 0xdf, 0xfa, 0x0b, 0x71, 0x6d, 0x09, 0x2d, 0x5f,
    0xd8, 0x71, 0xeb, 0xd9, 0xf5, 0x2a, 0x64, 0x57, 0x59, 0x99, 0xc7, 0x9b, 0x6d, 0xef, 0xac, 0xe2, 0xfb, 0xd7, 0x86, 0xf6,
    0x9f, 0x5d, 0x00, 0x43, 0x6b, 0x0d, 0xba, 0xef, 0xdc, 0x85, 0x80, 0x5e, 0xc4, 0xde, 0xb7, 0x1e, 0xb9, 0x37, 0xaf, 0xd7,
    0xa2, 0x8e, 0x59, 0x78, 0x8b, 0x6a, 0x1f, 0xde, 0x73, 0xce, 0x6f, 0xa7, 0xd8, 0x5d, 0xa5, 0x0f, 0x32, 0xe9, 0x5e, 0x5b,
    0x4b, 0xa4, 0x9d, 0xb4, 0xaf, 0x25, 0xb9, 0xbf, 0x6f, 0x6d, 0xb1, 0x03, 0xc1, 0x71, 0x8b, 0x94, 0x2f, 0xec, 0xb8, 0x8a,
    0xcd, 0xc2, 0xe9, 0xf2, 0xe5, 0x3b, 0x55, 0x4a, 0xff, 0x2a, 0x87, 0x23, 0x00, 0xbf, 0x1a, 0xbd, 0xc6, 0x43, 0xf5, 0xff,
    0x41, 0x52, 0xbe, 0xaf, 0xac, 0x35, 0x94, 0xea, 0xff, 0x7f, 0x72, 0xce, 0xe9, 0x5f, 0xa3, 0x87, 0xff, 0xb5, 0xea, 0xff,
    0x60, 0xec, 0xef, 0x7d, 0xc7, 0xa3, 0xff, 0xe2, 0xbd, 0x2f, 0x5e, 0x6f, 0x89, 0x91, 0x9f, 0xfe, 0x76, 0xea, 0x75, 0xbd,
    0x2b, 0x6c, 0xf3, 0x7a, 0xbc, 0x85, 0xed, 0x7b, 0x5b, 0x56, 0xb9, 0xcb, 0x7a, 0x9d, 0xbb, 0xbb, 0x87, 0xb8, 0xca, 0xc5,
    0x74, 0x95, 0xae, 0x62, 0x57, 0x7e, 0xd9, 0x4e, 0xa4, 0x12, 0xfd, 0xc7, 0x6a, 0x09, 0xf3, 0xfd, 0x1c, 0x56, 0xfd, 0xe7,
    0x7d, 0x1f, 0xcd, 0xfa, 0xaf, 0xb2, 0x17, 0xd4, 0x99, 0x2e, 0x64, 0xd4, 0x3b, 0x0b, 0xfd, 0xab, 0x39, 0xcc, 0xc1, 0xc4,
    0x0f, 0xda, 0x1d, 0x1d, 0x70, 0x97, 0x68, 0x6b, 0x72, 0x5f, 0x9a, 0x95, 0xfe, 0x0f, 0xad, 0x57, 0xf4, 0xd8, 0x77, 0xbd,
    0xf9, 0xd6, 0xff, 0x96, 0x60, 0x24, 0x14, 0x72, 0xff, 0xbf, 0x3d, 0x39, 0xf3, 0x3b, 0xd8, 0xc5, 0x81, 0xf3, 0xfe, 0xbf,
    0xb8, 0xfa, 0x2f, 0xe7, 0x61, 0x3d, 0x2b, 0xfd, 0x87, 0xec, 0xc3, 0xe3, 0x2e, 0x91, 0xc4, 0x7d, 0xaf, 0x5a, 0xfd, 0xb7,
    0x66, 0x94, 0xdf, 0xbc, 0xe9, 0x3f, 0xbc, 0x2f, 0xba, 0xd3, 0xe5, 0xcf, 0xfc, 0xee, 0x12, 0xea, 0xbf, 0x9c, 0xc6, 0x9a,
    0xad, 0xff, 0x93, 0x89, 0x4b, 0xef, 0xb1, 0x31, 0xd2, 0x98, 0x3e, 0xab, 0x23, 0x37, 0xdf, 0x97, 0xc6, 0x12, 0xa9, 0x6f,
    0x1e, 0x8d, 0xa3, 0xbf, 0xa3, 0x08, 0xf5, 0x16, 0xd6, 0x0d, 0x73, 0x62, 0xf5, 0xf7, 0x45, 0x92, 0x5a, 0xe3, 0x3e, 0x6e,
    0x4c, 0xfd, 0x67, 0x8f, 0x7b, 0xc2, 0x9a, 0x9f, 0x34, 0x9d, 0x3a, 0xee, 0x4a, 0x26, 0xad, 0xa4, 0xbe, 0x2f, 0x2b, 0xd4,
    0xbf, 0x3a, 0xd2, 0x9e, 0xe7, 0x09, 0x42, 0x68, 0xcb, 0xaa, 0x27, 0x3a, 0x4f, 0x33, 0x67, 0xca, 0xad, 0xff, 0x69, 0xfa,
    0x13, 0x51, 0xf4, 0x5f, 0xac, 0xb7, 0x94, 0xcb, 0x4f, 0x7b, 0x58, 0xfb, 0x7a, 0x41, 0x6c, 0xfd, 0xeb, 0xe3, 0x9e, 0xf6,
    0xa8, 0x52, 0x8a, 0xc4, 0x37, 0x5a, 0xee, 0xe6, 0x11, 0x2b, 0xc2, 0x89, 0x88, 0xae, 0x0d, 0x55, 0x1c, 0x37, 0xa4, 0x7c,
    0x9d, 0xc8, 0xcf, 0x13, 0xca, 0xe9, 0x1f, 0x85, 0x7c, 0xee, 0xfc, 0xe9, 0xb2, 0xc7, 0x74, 0xeb, 0x3f, 0x9b, 0xbe, 0xbc,
    0xfe, 0x51, 0xd1, 0x53, 0x96, 0x98, 0x1e, 0x1f, 0x31, 0xbd, 0x85, 0xa5, 0x1e, 0xdb, 0xe5, 0xe2, 0x7f, 0xd4, 0x3f, 0xf5,
    0x4f, 0xfd, 0x2f, 0xb2, 0xfe, 0x65, 0xbe, 0xd1, 0x57, 0x30, 0xc0, 0xe3, 0xc4, 0xa5, 0xf7, 0xa4, 0xb3, 0xe4, 0x6b, 0x49,
    0x1a, 0xcd, 0xaa, 0x31, 0xdd, 0x73, 0x0c, 0x52, 0xbc, 0xb5, 0x9e, 0x81, 0xaf, 0x33, 0x79, 0xf9, 0xdd, 0x81, 0x63, 0xe9,
    0x3f, 0x7b, 0x5c, 0x7b, 0x7d, 0xa5, 0xe9, 0xb2, 0xed, 0xf2, 0x4a, 0x78, 0xdc, 0x57, 0x05, 0xf4, 0xaf, 0xda, 0xf3, 0x13,
    0x81, 0xfe, 0xd5, 0x91, 0xf6, 0x31, 0xc0, 0xc3, 0xc8, 0xfa, 0x3f, 0x95, 0x69, 0x89, 0x7a, 0xf5, 0x1f, 0x72, 0x36, 0xae,
    0x4c, 0xea, 0xee, 0xce, 0x6f, 0xea, 0x4d, 0x7d, 0xd2, 0x5a, 0xff, 0x4d, 0x41, 0x2f, 0x6d, 0xb2, 0xfe, 0xe3, 0x38, 0x5f,
    0x87, 0x3e, 0x2d, 0xaa, 0x6e, 0x25, 0x44, 0xd3, 0xe3, 0x7f, 0x55, 0xba, 0x54, 0x4b, 0x9e, 0xed, 0x55, 0x15, 0xff, 0x0b,
    0x59, 0xff, 0x53, 0x85, 0xfe, 0xcb, 0xc5, 0x2a, 0x8b, 0xb5, 0x91, 0x34, 0x3a, 0xde, 0x64, 0xfd, 0x2b, 0x1f, 0xbe, 0x73,
    0xde, 0x54, 0x1f, 0xa3, 0x83, 0x2b, 0x91, 0x7a, 0xcb, 0x7d, 0x74, 0x52, 0xbc, 0x89, 0xac, 0xff, 0x9b, 0xe8, 0x1a, 0xea,
    0x93, 0x4e, 0xb7, 0x91, 0x8c, 0x79, 0xf6, 0xd0, 0xc1, 0xd6, 0x12, 0xeb, 0x5f, 0x9d, 0xd1, 0xfd, 0xa4, 0x25, 0x4e, 0xcf,
    0x4c, 0xff, 0x6b, 0x49, 0x0f, 0x38, 0x40, 0x17, 0xc7, 0xb5, 0xea, 0x7f, 0x5a, 0x77, 0x77, 0x2f, 0xf0, 0xb5, 0x91, 0xf6,
    0xb0, 0x9e, 0x85, 0xfe, 0x77, 0xd0, 0x49, 0xfa, 0xfa, 0xdd, 0xa4, 0x0d, 0x57, 0x66, 0xfc, 0x16, 0xc1, 0xac, 0xf4, 0x30,
    0x7f, 0xeb, 0x7f, 0x9a, 0xa2, 0xff, 0xea, 0x5b, 0xc2, 0xaf, 0xff, 0x69, 0x4d, 0x51, 0xab, 0xfe, 0x43, 0xea, 0x1e, 0xe3,
    0x29, 0x75, 0x15, 0xfa, 0x6f, 0xd5, 0xea, 0x9d, 0xe3, 0x73, 0xe9, 0x50, 0x7f, 0xfb, 0x89, 0x4f, 0x5e, 0x9a, 0x8d, 0x52,
    0x67, 0x34, 0x9b, 0x9f, 0xd9, 0x1d, 0x58, 0xbb, 0x08, 0xfb, 0xd2, 0xa5, 0xf3, 0xbb, 0x9c, 0xfc, 0x6a, 0x35, 0x72, 0x3d,
    0xec, 0xa3, 0xab, 0x6c, 0xf9, 0xfe, 0x2c, 0xa5, 0x7f, 0x95, 0xc3, 0x1f, 0x00, 0x1e, 0x1a, 0xcf, 0x47, 0xfa, 0x68, 0xb6,
    0x5a, 0xa6, 0x8f, 0xb4, 0x99, 0xa4, 0xb9, 0x64, 0xad, 0x61, 0xb9, 0x96, 0x90, 0xea, 0xff, 0x01, 0xfa, 0x78, 0x61, 0xd4,
    0x7f, 0xc8, 0xd9, 0x0d, 0x3d, 0x1b, 0x97, 0x3d, 0x75, 0x97, 0xb4, 0x91, 0xb4, 0x7c, 0x52, 0xbd, 0xc6, 0xce, 0x2f, 0x1e,
    0x9d, 0x88, 0xef, 0xcd, 0xcc, 0x22, 0x02, 0x5b, 0xc5, 0xfb, 0x3f, 0xc5, 0xdc, 0xe2, 0xe3, 0xb5, 0xcb, 0xc0, 0x79, 0xb4,
    0x41, 0xf4, 0x27, 0x21, 0xa1, 0x2d, 0x21, 0xd5, 0x7f, 0x9c, 0xf7, 0x7f, 0x42, 0xcf, 0xc6, 0x20, 0xe2, 0x68, 0x2c, 0x56,
    0xfc, 0xbf, 0x8a, 0xfc, 0xa8, 0x7f, 0xea, 0x9f, 0xfa, 0xa7, 0xfe, 0x09, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10,
    0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10,
    0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0xcd, 0x43, 0x79, 0x09, 0x99, 0xf7, 0xfe,
    0xdf, 0xc1, 0x10, 0x47, 0x82, 0xf4, 0x47, 0x56, 0x6f, 0x24, 0x69, 0xba, 0x3c, 0xee, 0x74, 0x4f, 0x02, 0x6a, 0x11, 0x92,
    0x8b, 0xe6, 0x9a, 0xc0, 0x1b, 0xcb, 0xbe, 0x0b, 0xcf, 0x8e, 0xd3, 0x4d, 0xe1, 0xc2, 0xd8, 0xfd, 0x79, 0xea, 0x95, 0xb9,
    0x59, 0xb8, 0x36, 0xe9, 0xfc, 0x5c, 0x2e, 0xe4, 0x79, 0x8e, 0xac, 0x7e, 0x51, 0x17, 0x04, 0x6e, 0xe5, 0xad, 0xb1, 0x67,
    0xac, 0xbd, 0x15, 0x63, 0xd6, 0xd2, 0x9f, 0x6e, 0xe4, 0x24, 0xb7, 0x56, 0xe8, 0x08, 0xe6, 0x34, 0xe9, 0x36, 0x98, 0xd6,
    0x41, 0x61, 0x76, 0xf7, 0x54, 0xdf, 0x6c, 0x8c, 0x5d, 0x55, 0x7d, 0x2d, 0x27, 0x69, 0xe1, 0x22, 0xf9, 0xb9, 0xda, 0xda,
    0xdd, 0x97, 0xcb, 0xef, 0xdf, 0x1a, 0x73, 0xa7, 0x2f, 0x14, 0xd8, 0xf9, 0xaa, 0x88, 0xff, 0x80, 0x7d, 0xe7, 0xa4, 0x90,
    0xdd, 0xce, 0xf2, 0xe9, 0xdc, 0xfe, 0x3c, 0xc5, 0xf6, 0x9f, 0x6a, 0x79, 0xf3, 0xf3, 0xb9, 0x06, 0xb5, 0x04, 0xe7, 0xa2,
    0x15, 0xb0, 0xff, 0x54, 0x3f, 0x60, 0x17, 0xb2, 0xaa, 0xbd, 0x16, 0x24, 0x7b, 0x1d, 0x87, 0xe5, 0x9e, 0x3f, 0xc3, 0xf6,
    0x5d, 0x8a, 0x5b, 0x46, 0x9f, 0xa7, 0xf2, 0xfb, 0xd5, 0x85, 0xe6, 0xe7, 0xf3, 0xdd, 0xf5, 0xd7, 0xff, 0x83, 0x8c, 0x1f,
    0x74, 0x3d, 0xfa, 0xdf, 0xcd, 0xf1, 0xda, 0x9a, 0xdf, 0x41, 0xe6, 0x4a, 0x57, 0xa4, 0x2f, 0xe9, 0x63, 0xfc, 0x62, 0xed,
    0xb9, 0x7b, 0x63, 0x2f, 0x6b, 0x97, 0x37, 0x76, 0x7a, 0x87, 0xd6, 0xfc, 0x2e, 0xbc, 0x76, 0x37, 0x45, 0xed, 0x7e, 0x3a,
    0x9c, 0x78, 0x5f, 0xbe, 0x2c, 0xa5, 0x8c, 0x74, 0x7e, 0xae, 0xb1, 0x93, 0x54, 0xff, 0xf9, 0xfc, 0xcc, 0xee, 0xac, 0xba,
    0xd7, 0xfd, 0x6a, 0x3c, 0x17, 0xb1, 0x6b, 0xa9, 0xef, 0x85, 0x76, 0x56, 0x2d, 0x77, 0xc8, 0x72, 0xfa, 0xff, 0x33, 0x53,
    0x87, 0xe3, 0xf1, 0xa7, 0x1f, 0xb1, 0x6e, 0x18, 0x69, 0xa4, 0x5d, 0x55, 0x5d, 0x2d, 0x27, 0x6d, 0xe1, 0x22, 0xf9, 0x3d,
    0xf5, 0xf8, 0xc6, 0xfa, 0xeb, 0x1f, 0xea, 0xdf, 0x16, 0x43, 0xff, 0xd2, 0xbe, 0xe9, 0x3e, 0x97, 0xf1, 0x9c, 0x98, 0xe3,
    0xf8, 0xaa, 0x74, 0xbc, 0xa3, 0x94, 0x76, 0x84, 0xdd, 0x45, 0x43, 0x6b, 0x1d, 0xf3, 0x9c, 0x85, 0xb8, 0x10, 0x20, 0x8a,
    0x7b, 0x76, 0x38, 0xe5, 0xf4, 0x1f, 0xaa, 0x8a, 0xac, 0xab, 0x62, 0x9c, 0x51, 0x71, 0x48, 0x7e, 0xed, 0xa0, 0x11, 0x60,
    0xd1, 0x9a, 0xaa, 0xbb, 0xe2, 0x75, 0xec, 0x26, 0x1e, 0x3b, 0xa3, 0xeb, 0xee, 0x8f, 0xe8, 0x19, 0x66, 0x45, 0x45, 0xf4,
    0x1f, 0x96, 0x9f, 0xad, 0x54, 0xc5, 0xf5, 0xa9, 0x8e, 0xfe, 0x3d, 0x7a, 0xf8, 0x72, 0x32, 0x16, 0xfa, 0x2a, 0x70, 0x36,
    0x15, 0x57, 0xff, 0xbe, 0xd9, 0x5f, 0x88, 0x82, 0xb2, 0xb3, 0xc4, 0xf2, 0x63, 0xb6, 0x23, 0xeb, 0xfd, 0x3f, 0x76, 0x2d,
    0xe3, 0xdc, 0xff, 0xc3, 0xc6, 0x08, 0xd4, 0xbf, 0xad, 0xa6, 0xd2, 0x7b, 0x64, 0x11, 0xfd, 0x97, 0xf3, 0xa3, 0x91, 0xf9,
    0xe2, 0x4a, 0xf5, 0xd9, 0x2a, 0x34, 0x9b, 0xd2, 0x28, 0xbf, 0xff, 0x33, 0xce, 0xfc, 0x4f, 0x79, 0xdc, 0x40, 0x25, 0xb3,
    0xbf, 0x2a, 0xf6, 0xbd, 0x96, 0xba, 0xb3, 0xca, 0x62, 0x31, 0xf5, 0xd4, 0xb2, 0x8c, 0xd7, 0x51, 0x3c, 0xfd, 0x2b, 0xc7,
    0xd0, 0x8d, 0x88, 0xfa, 0x0f, 0xcd, 0xef, 0x94, 0xc7, 0x37, 0xd6, 0xad, 0x7f, 0xd5, 0x63, 0xcf, 0x67, 0x66, 0x1a, 0x76,
    0xfd, 0xab, 0xd8, 0xef, 0xc1, 0x24, 0xfd, 0x9a, 0x35, 0xae, 0x7a, 0x29, 0x99, 0x91, 0x68, 0x8e, 0x9d, 0x73, 0xd3, 0x15,
    0x4f, 0x7e, 0xfe, 0x5e, 0xa0, 0x4b, 0x75, 0xa6, 0xb0, 0xfe, 0xa5, 0xcf, 0x2c, 0xe2, 0x8d, 0x47, 0xed, 0x67, 0x55, 0x32,
    0xfb, 0x2b, 0x12, 0x27, 0xf0, 0xcd, 0xc8, 0x25, 0xb1, 0x58, 0x95, 0xcf, 0xdf, 0x00, 0xfe, 0x32, 0xc6, 0xff, 0xeb, 0xaf,
    0xa5, 0x4f, 0xdb, 0xae, 0xbe, 0x15, 0x4f, 0xff, 0xb3, 0xf6, 0xb5, 0x6b, 0x95, 0x8a, 0xff, 0xe5, 0x3d, 0x51, 0xed, 0xfa,
    0x6f, 0xcd, 0xc0, 0xcb, 0x20, 0x8e, 0x4f, 0x71, 0x68, 0xba, 0xea, 0xe6, 0xa3, 0x23, 0x17, 0xd2, 0xbf, 0xa2, 0x8d, 0xfe,
    0xc2, 0xc6, 0x78, 0xf6, 0x11, 0x79, 0xd6, 0x9d, 0xb5, 0x63, 0xf4, 0xc7, 0x94, 0xcf, 0xff, 0xeb, 0xa9, 0x65, 0x19, 0xaf,
    0xe3, 0xe6, 0xea, 0xff, 0x21, 0xba, 0xa9, 0xd9, 0x95, 0x3f, 0x3f, 0x57, 0x5b, 0x53, 0xff, 0x4d, 0xd3, 0x7f, 0x5b, 0xf0,
    0xac, 0x73, 0x16, 0xfa, 0x0f, 0x99, 0x4f, 0x74, 0x1b, 0x52, 0xcb, 0xc5, 0xd4, 0x7f, 0xbd, 0xf3, 0xff, 0x10, 0xfd, 0xeb,
    0x27, 0x5c, 0x17, 0x93, 0x39, 0xa2, 0x7d, 0xbc, 0xbd, 0x89, 0x36, 0xbe, 0x03, 0xf0, 0x2c, 0x99, 0x99, 0x9c, 0xb4, 0xa6,
    0xb3, 0x3f, 0x31, 0x0b, 0xed, 0x9b, 0x6b, 0x82, 0x52, 0xcd, 0x4e, 0xff, 0x79, 0xff, 0xc9, 0xbf, 0x4b, 0xcd, 0xfe, 0xf2,
    0x7e, 0x91, 0x7e, 0x8f, 0x4e, 0xd7, 0x2c, 0x51, 0x9a, 0x9f, 0x5b, 0xff, 0xb1, 0x6b, 0x59, 0x4e, 0xff, 0xcf, 0x3d, 0x7d,
    0xab, 0x5e, 0xfd, 0x87, 0x38, 0x9a, 0xfe, 0x81, 0x3e, 0xee, 0x04, 0xf8, 0xdf, 0xba, 0xda, 0x3a, 0xae, 0xfe, 0x43, 0x9e,
    0x91, 0x49, 0xc7, 0x09, 0xdd, 0x68, 0xcf, 0xba, 0xda, 0x8d, 0x76, 0x4e, 0xab, 0xd6, 0x7f, 0x0e, 0xb5, 0xe4, 0x57, 0xd5,
    0x2a, 0xa7, 0x2a, 0xf4, 0x0f, 0x4f, 0xdf, 0xaa, 0x57, 0xff, 0xcd, 0x5b, 0xff, 0xa3, 0x66, 0x78, 0x77, 0xd0, 0xc5, 0x2d,
    0x74, 0x70, 0x65, 0xbc, 0xfa, 0xb5, 0x83, 0xdb, 0xe8, 0xe2, 0x36, 0x3a, 0xb8, 0x96, 0x4b, 0xaf, 0xe6, 0x18, 0x37, 0xc6,
    0x2b, 0x5c, 0xd7, 0x92, 0x5f, 0x1f, 0xa0, 0xeb, 0x78, 0xee, 0xe6, 0x53, 0x5a, 0x3a, 0xbf, 0x38, 0xfa, 0x8f, 0x51, 0xaa,
    0xd9, 0xeb, 0x5f, 0x32, 0xfb, 0x2b, 0xa2, 0x7f, 0xdf, 0x2c, 0x71, 0xd1, 0xf4, 0xaf, 0xe2, 0x19, 0x37, 0xd1, 0xc5, 0x37,
    0xd4, 0x7f, 0xc0, 0xfd, 0xb7, 0xe7, 0x5d, 0xe9, 0x28, 0x8d, 0x38, 0xc6, 0x99, 0xd7, 0x87, 0xaf, 0x16, 0x29, 0x57, 0xaa,
    0xd9, 0x22, 0x9d, 0xfd, 0xc5, 0x8e, 0x3b, 0x94, 0xeb, 0x33, 0x55, 0xad, 0x36, 0x9a, 0xc5, 0xfc, 0xbf, 0x09, 0x3d, 0x20,
    0xe6, 0xca, 0xae, 0x66, 0xeb, 0x7f, 0x3f, 0x70, 0x0e, 0xbb, 0x0c, 0xfa, 0x97, 0xcc, 0xfe, 0x62, 0xc7, 0x1d, 0xe6, 0x49,
    0xff, 0xaa, 0x2e, 0x67, 0x84, 0xfa, 0xdf, 0x41, 0x1f, 0x3f, 0x27, 0xbf, 0x78, 0x8f, 0xfa, 0x6f, 0xa0, 0xfe, 0x63, 0x3b,
    0xee, 0x2f, 0x82, 0xfe, 0xa5, 0xa3, 0xbf, 0x98, 0xf3, 0x8e, 0x78, 0xfa, 0xbf, 0x9b, 0x5c, 0x65, 0x34, 0x97, 0x84, 0x57,
    0xf4, 0x10, 0xfd, 0x87, 0xae, 0xed, 0x29, 0xf3, 0x8e, 0x10, 0xf5, 0x4f, 0xfd, 0x53, 0xff, 0x45, 0xe6, 0xff, 0x88, 0xb0,
    0x42, 0x94, 0xfa, 0xaf, 0x5a, 0xff, 0xf3, 0x80, 0xec, 0xcd, 0xdd, 0x7a, 0x72, 0x21, 0x3e, 0xae, 0x26, 0x51, 0x46, 0xcd,
    0xe9, 0x5a, 0x62, 0xa9, 0x8b, 0x84, 0x6a, 0xb5, 0xb3, 0x85, 0x7e, 0x79, 0xd3, 0x19, 0xf7, 0xa6, 0xfe, 0xa9, 0xff, 0xc5,
    0x61, 0x71, 0xf5, 0x4f, 0xc2, 0xde, 0xb9, 0xaf, 0x37, 0x17, 0xd2, 0x0c, 0xce, 0xf1, 0x4c, 0x12, 0x42, 0x08, 0x21, 0x84,
    0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84,
    0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x64, 0x01, 0x49, 0xbb, 0x2b, 0xae, 0x3a, 0x5c, 0x18, 0x2f, 0xe4,
    0x7c, 0xba, 0xcd, 0xbe, 0x98, 0xca, 0x85, 0xeb, 0xa6, 0xf7, 0x48, 0x23, 0x76, 0x8c, 0xb9, 0x14, 0x4f, 0xa7, 0xd9, 0xc4,
    0xae, 0xc1, 0xb5, 0xab, 0x8a, 0xe3, 0xef, 0x0a, 0x5b, 0xa5, 0x95, 0xec, 0xab, 0xac, 0x7d, 0xae, 0xf2, 0x2e, 0x54, 0x79,
    0xe7, 0x31, 0xfd, 0xdf, 0xa1, 0xb5, 0x3d, 0xb3, 0xe7, 0x66, 0x11, 0xf7, 0x7c, 0x20, 0xd5, 0x23, 0xd9, 0x23, 0xa9, 0x15,
    0x65, 0x5f, 0xe8, 0xea, 0xbd, 0xcf, 0xa6, 0xca, 0xac, 0xd3, 0xa3, 0x45, 0xd2, 0x2a, 0x2d, 0xcf, 0x6e, 0x5e, 0xf6, 0x3d,
    0xae, 0x20, 0xd8, 0x67, 0x33, 0x64, 0x2f, 0x4e, 0x42, 0x4c, 0x3d, 0xcf, 0xe5, 0x91, 0x98, 0xf6, 0x8f, 0x9c, 0xb2, 0xd3,
    0x20, 0xfd, 0x9f, 0x4c, 0xca, 0x78, 0xc2, 0xa9, 0x7f, 0xed, 0x48, 0x7a, 0x7a, 0x92, 0xde, 0xec, 0x48, 0x2a, 0x3d, 0xfe,
    0x30, 0xc7, 0x3f, 0x56, 0xfd, 0xef, 0xa1, 0x87, 0xdb, 0x0e, 0x9f, 0x6b, 0xb3, 0xfe, 0x75, 0xfa, 0x6f, 0xd1, 0xc3, 0x1d,
    0xcb, 0xf9, 0xd3, 0xe7, 0x66, 0xea, 0x7c, 0xba, 0x66, 0x74, 0xd1, 0x24, 0xc4, 0xa5, 0xca, 0x58, 0x7b, 0xa4, 0xcf, 0x46,
    0xff, 0xb3, 0x76, 0x2e, 0xf7, 0xa5, 0xeb, 0x17, 0x72, 0xa1, 0x49, 0x8f, 0x1c, 0x06, 0xe2, 0xf3, 0xb7, 0xa8, 0x3b, 0x40,
    0x92, 0xa6, 0xeb, 0x5f, 0xdd, 0xab, 0x8e, 0x00, 0xfc, 0x8a, 0xdd, 0x94, 0x77, 0x0d, 0xf5, 0x4f, 0xfd, 0x93, 0x26, 0xeb,
    0xdf, 0xe7, 0x91, 0xa8, 0x1c, 0x23, 0x7f, 0x4e, 0x5c, 0x35, 0x35, 0x67, 0xac, 0x79, 0xd9, 0x77, 0xd7, 0x6c, 0x82, 0xfe,
    0x95, 0x23, 0xe9, 0x3e, 0x06, 0x78, 0xec, 0x70, 0x24, 0xd5, 0xb5, 0x55, 0x8e, 0x51, 0x67, 0x93, 0xda, 0x9e, 0x47, 0x1b,
    0xab, 0xc6, 0xb4, 0xf7, 0x32, 0xad, 0x62, 0x4f, 0x57, 0x9d, 0xfe, 0x55, 0x69, 0x4f, 0x67, 0x9c, 0x4f, 0xed, 0xa5, 0x20,
    0xa4, 0x4c, 0x8c, 0xc9, 0xb7, 0xa3, 0xbb, 0x9a, 0x03, 0x2b, 0x67, 0x99, 0xbf, 0x30, 0xc4, 0x93, 0x46, 0xea, 0xbf, 0x15,
    0xe8, 0x48, 0xda, 0x16, 0x7a, 0xaf, 0xb9, 0x5a, 0x45, 0xcd, 0xd0, 0x7f, 0x2b, 0xad, 0xff, 0xe3, 0x4c, 0x84, 0xc3, 0x76,
    0x2d, 0x88, 0xe3, 0x15, 0x40, 0x96, 0x4b, 0xff, 0xf7, 0x05, 0xfe, 0x9b, 0x3b, 0x89, 0xab, 0xa6, 0xc6, 0xee, 0xae, 0x59,
    0x7e, 0xfe, 0xaf, 0x1d, 0x49, 0x2f, 0x4e, 0xdc, 0x2a, 0xf7, 0xd0, 0xc1, 0x96, 0x35, 0xbf, 0xcf, 0xd0, 0xc5, 0xdd, 0x4c,
    0xa9, 0xec, 0xfa, 0xbf, 0x3a, 0x76, 0x3a, 0xdd, 0xf7, 0xec, 0x4b, 0x2f, 0xd1, 0xbf, 0x76, 0x2e, 0x9d, 0xb2, 0x52, 0xf8,
    0x0a, 0xeb, 0xd7, 0xbf, 0xc4, 0x07, 0x64, 0xcd, 0x51, 0x0a, 0x42, 0xca, 0xc6, 0xf6, 0xca, 0xcd, 0x74, 0x43, 0x3d, 0x52,
    0xa5, 0xf3, 0xf4, 0x2a, 0x9c, 0xcb, 0x8b, 0xc5, 0x09, 0x5a, 0x33, 0xd6, 0x3f, 0x21, 0x55, 0xe8, 0x7f, 0x3b, 0x87, 0xdd,
    0x8f, 0xd2, 0xae, 0xff, 0xb4, 0x0b, 0xa5, 0x2f, 0x97, 0xbb, 0x63, 0xf7, 0xcb, 0x91, 0x5b, 0xe5, 0xaa, 0x33, 0xbf, 0x1b,
    0xe8, 0xe3, 0xde, 0x78, 0xed, 0x51, 0x1f, 0xd7, 0xb1, 0x8d, 0xeb, 0xe8, 0xe3, 0x81, 0xb1, 0x16, 0xf7, 0x93, 0xdf, 0xa8,
    0x38, 0x80, 0xdd, 0x97, 0x4e, 0x7a, 0xfc, 0x10, 0xe7, 0x52, 0xea, 0x9f, 0xcc, 0xaf, 0xfe, 0xf3, 0x7f, 0xeb, 0x05, 0xd7,
    0xa2, 0xf4, 0x85, 0xb9, 0x84, 0xce, 0xd3, 0xa7, 0x34, 0xd3, 0xb9, 0x90, 0xfa, 0x27, 0xd4, 0xff, 0x72, 0xea, 0x5f, 0xcd,
    0xc9, 0x9f, 0x95, 0xd6, 0xff, 0x0b, 0xce, 0xed, 0xc9, 0x1c, 0xb0, 0x38, 0x6b, 0x51, 0x63, 0x7a, 0x04, 0x57, 0xf7, 0xfc,
    0x8f, 0x90, 0xa6, 0xe9, 0xff, 0xe1, 0x42, 0x78, 0xb2, 0x51, 0xff, 0x84, 0x14, 0xe9, 0xe9, 0xf3, 0xed, 0xc9, 0xda, 0x1f,
    0x73, 0x27, 0xe2, 0x55, 0x8c, 0xfa, 0x27, 0xd4, 0xff, 0x62, 0xad, 0x88, 0xa2, 0xfe, 0x09, 0x59, 0x3c, 0xba, 0x63, 0x2e,
    0x56, 0x30, 0x9f, 0xa8, 0xe6, 0xfd, 0x5f, 0x42, 0xc8, 0x3c, 0xc4, 0x13, 0xa8, 0x7f, 0x42, 0x96, 0x93, 0x0f, 0x27, 0x6b,
    0x84, 0xde, 0x33, 0xae, 0x4d, 0x3a, 0x63, 0x5d, 0x77, 0x75, 0x96, 0xad, 0x47, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21,
    0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21,
    0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0xc6, 0xf4, 0xd0, 0xc3, 0x47, 0xd6, 0x6f, 0x3f, 0x77, 0x38, 0x53, 0xa7,
    0xb9, 0x36, 0xf1, 0xc8, 0x5e, 0x13, 0x1e, 0xe5, 0x10, 0x3d, 0x7c, 0x9a, 0x4b, 0xa7, 0x72, 0xc8, 0x3a, 0x15, 0x1d, 0x19,
    0x3d, 0xbc, 0xf3, 0xe9, 0x34, 0x9b, 0x89, 0x63, 0x9e, 0xc6, 0xec, 0x00, 0xb8, 0x33, 0xf6, 0x43, 0x72, 0xf9, 0xe9, 0x3c,
    0x30, 0xf8, 0x7f, 0x0f, 0x71, 0x68, 0x6d, 0x81, 0x6c, 0xfa, 0x35, 0x67, 0x6b, 0x6d, 0x4d, 0xfc, 0x53, 0x77, 0xb0, 0x8b,
    0xcd, 0xdc, 0xf7, 0xeb, 0x29, 0xce, 0x04, 0x7e, 0x1b, 0x5a, 0xf6, 0x1d, 0x81, 0xc3, 0x91, 0xce, 0xef, 0x89, 0xa3, 0x4e,
    0x17, 0xb0, 0x6b, 0x71, 0x8c, 0x4a, 0x97, 0xc1, 0x95, 0x43, 0xbe, 0xc4, 0xf6, 0x56, 0xb4, 0x9d, 0x39, 0xe5, 0x50, 0xbb,
    0xf1, 0x4e, 0xfd, 0x4c, 0x2d, 0x6c, 0x6e, 0xa5, 0x1d, 0x63, 0x5b, 0xbf, 0x67, 0xfc, 0xb5, 0x79, 0xcf, 0x26, 0x69, 0x5d,
    0xa5, 0x3d, 0x46, 0xd7, 0x67, 0xcb, 0xe8, 0xb8, 0x1b, 0x83, 0x38, 0x3b, 0x53, 0xf9, 0x76, 0xb0, 0xaf, 0xd2, 0x1b, 0x30,
    0x8b, 0x64, 0x07, 0x72, 0x89, 0xfb, 0x4f, 0xdf, 0xb8, 0xfb, 0x77, 0xcf, 0xda, 0x02, 0xc5, 0x76, 0x3e, 0x1f, 0x3a, 0x1d,
    0x05, 0xec, 0x3e, 0xab, 0x70, 0xee, 0xc2, 0x16, 0x52, 0x76, 0x69, 0x7b, 0xf9, 0xf6, 0x7c, 0x73, 0xfb, 0x42, 0x41, 0x90,
    0x43, 0xc8, 0x2e, 0xf4, 0x6d, 0xf1, 0x3e, 0x2b, 0x6e, 0x0f, 0x2a, 0x89, 0xb7, 0xc3, 0x76, 0x80, 0x32, 0xa4, 0x75, 0x95,
    0xb6, 0xbc, 0xc4, 0xbd, 0xbb, 0xaa, 0xfb, 0xbf, 0xba, 0xa2, 0xff, 0x02, 0xe0, 0x3f, 0xc9, 0x55, 0x68, 0xd7, 0x7a, 0x1d,
    0xdd, 0x43, 0x0f, 0xb7, 0x27, 0x69, 0x7e, 0x34, 0xde, 0xd7, 0xd5, 0x51, 0xae, 0x4f, 0xd2, 0xd8, 0xd3, 0xa9, 0x6f, 0xbe,
    0x47, 0x0f, 0x5f, 0xa2, 0x85, 0x0f, 0x92, 0x5f, 0x7d, 0x65, 0x3c, 0x6e, 0x39, 0xfd, 0xdf, 0xcb, 0xb8, 0xff, 0x9e, 0x11,
    0x94, 0x56, 0xa3, 0xea, 0x7a, 0x68, 0x6d, 0x2d, 0x5f, 0xed, 0x14, 0xab, 0x58, 0xc7, 0x1e, 0x86, 0x78, 0x9a, 0xdc, 0x5b,
    0x8e, 0x8d, 0x77, 0x9d, 0x32, 0xfa, 0x0f, 0x2d, 0xfb, 0x3d, 0x8f, 0xef, 0x73, 0x3a, 0xbf, 0x6b, 0xc9, 0xa7, 0xf7, 0x8d,
    0x77, 0x49, 0xe5, 0x80, 0xfa, 0x83, 0x71, 0x44, 0x92, 0x2e, 0x83, 0x2d, 0x87, 0x77, 0xd3, 0xb9, 0x5a, 0x71, 0xea, 0x84,
    0x7c, 0xa6, 0xb0, 0xfe, 0x55, 0x29, 0x5e, 0x8c, 0xdb, 0x70, 0xd4, 0xbf, 0x5f, 0x07, 0xe8, 0xff, 0xae, 0x75, 0xf7, 0x58,
    0x5d, 0xf2, 0x5f, 0x3c, 0x7a, 0x95, 0xea, 0x41, 0x8d, 0x0c, 0x2e, 0x65, 0x7a, 0xcc, 0x89, 0xda, 0x66, 0x06, 0x92, 0xeb,
    0x63, 0xfe, 0xca, 0x2f, 0xbd, 0xde, 0x56, 0xe1, 0xcd, 0xa7, 0x5b, 0x6b, 0x8a, 0x59, 0x5f, 0xc5, 0xc7, 0x44, 0x6e, 0xe7,
    0x61, 0xe9, 0x5d, 0xc7, 0x57, 0x3b, 0x3d, 0x7b, 0xf9, 0xce, 0xd8, 0x8b, 0xd2, 0xf3, 0x9b, 0xb3, 0x15, 0x94, 0xdd, 0x9e,
    0x9f, 0xeb, 0xae, 0x2b, 0xbb, 0xeb, 0x85, 0x39, 0x18, 0xdb, 0xfc, 0x63, 0xed, 0x47, 0x09, 0x19, 0x3f, 0x66, 0x4b, 0x6c,
    0x4e, 0xa7, 0xdd, 0xd7, 0xa5, 0x63, 0x1d, 0xe9, 0xb8, 0x39, 0xb6, 0x57, 0x66, 0x71, 0xcc, 0x33, 0x1c, 0xf5, 0xdf, 0x47,
    0x18, 0xe2, 0x0d, 0x80, 0xb7, 0x8e, 0xf9, 0x51, 0xbe, 0x35, 0x0e, 0xad, 0x77, 0xbe, 0xfe, 0xd8, 0x39, 0xfc, 0x95, 0xa7,
    0x1e, 0x7a, 0x3c, 0xe1, 0xba, 0x57, 0xd8, 0xf7, 0xd3, 0x0b, 0x71, 0x00, 0xf2, 0x9d, 0x9d, 0xad, 0xcc, 0x15, 0x7a, 0xd3,
    0xa9, 0xa1, 0xec, 0xfd, 0xff, 0x75, 0x94, 0xb3, 0x59, 0x64, 0xd4, 0x97, 0x2f, 0xfb, 0xa9, 0x86, 0xe8, 0x7f, 0xcb, 0x73,
    0x4e, 0xa5, 0xa3, 0xa8, 0x3a, 0xf5, 0x6f, 0xe6, 0xaa, 0x77, 0xf7, 0xd8, 0xf9, 0xd1, 0xbf, 0x5b, 0x49, 0xc5, 0x3c, 0xba,
    0x5a, 0x95, 0xf7, 0x7c, 0xa9, 0xfe, 0xed, 0xd1, 0x1f, 0x49, 0x9b, 0x74, 0x72, 0xa3, 0x1f, 0xb7, 0xf3, 0xb0, 0x6f, 0xb4,
    0xa4, 0xc6, 0xac, 0x97, 0xd1, 0xc6, 0x3e, 0x06, 0x78, 0xec, 0x88, 0x4f, 0xc6, 0xd0, 0x7f, 0x3e, 0x22, 0x53, 0x9d, 0xfe,
    0x55, 0x4d, 0x7e, 0x07, 0xf0, 0x93, 0x71, 0x44, 0x12, 0x52, 0x1b, 0xc9, 0x18, 0x71, 0xc5, 0x1a, 0xf7, 0xac, 0x4b, 0xff,
    0xb2, 0x78, 0x58, 0x2c, 0xfd, 0x6f, 0x66, 0x7a, 0xcc, 0x53, 0x0c, 0xa2, 0x46, 0x02, 0xcb, 0xe9, 0xdf, 0x3d, 0xf3, 0x0b,
    0xd7, 0xbf, 0x1e, 0xb7, 0xdf, 0x02, 0x70, 0x3c, 0xf9, 0x74, 0x4a, 0x18, 0xff, 0x2f, 0xe6, 0x75, 0xee, 0xd6, 0x50, 0x76,
    0xf4, 0x63, 0xd6, 0x90, 0x1e, 0x2d, 0x4d, 0xf9, 0xc7, 0x39, 0x9b, 0x0c, 0x89, 0xaa, 0xce, 0x5a, 0xff, 0xe9, 0x39, 0xd5,
    0x79, 0x47, 0xa4, 0xda, 0x7d, 0x17, 0xd0, 0x51, 0x8f, 0xb0, 0x98, 0xf8, 0x96, 0xf1, 0xdc, 0xb7, 0x22, 0xe8, 0x4a, 0xe5,
    0xfe, 0xf7, 0x9c, 0xe8, 0x5f, 0x12, 0x31, 0x9e, 0x95, 0xfe, 0x43, 0xe3, 0x9d, 0x2f, 0x31, 0x48, 0xbc, 0x32, 0x5d, 0xf3,
    0x7a, 0x08, 0xe3, 0x0e, 0x92, 0xa8, 0xca, 0xa9, 0xd2, 0xfa, 0x1f, 0x08, 0xe6, 0xd0, 0xd2, 0xb3, 0xa9, 0x9e, 0x59, 0xdd,
    0x41, 0x17, 0xb7, 0xd0, 0xc1, 0x7e, 0xe2, 0x41, 0x70, 0xda, 0x59, 0x8e, 0x9d, 0x89, 0xf3, 0xf9, 0xec, 0xf4, 0x2f, 0x8d,
    0xff, 0xeb, 0x67, 0xaa, 0xe5, 0xc6, 0x88, 0xad, 0x92, 0xb3, 0xb7, 0x22, 0xf1, 0xff, 0xa6, 0xeb, 0xff, 0x6a, 0xa6, 0xc7,
    0xec, 0xa1, 0x83, 0xad, 0xb9, 0xd5, 0xbf, 0xe4, 0x79, 0x47, 0x71, 0xfd, 0x87, 0x3e, 0x87, 0xab, 0x5b, 0xff, 0xd5, 0xcf,
    0xe6, 0x66, 0xa7, 0xff, 0x38, 0x73, 0x44, 0xea, 0x7f, 0xbe, 0xe6, 0xff, 0xb2, 0x99, 0xdf, 0xc8, 0x73, 0xe7, 0x46, 0x66,
    0xa5, 0xc9, 0x01, 0xba, 0x86, 0xf5, 0x22, 0xe9, 0xc8, 0xf7, 0xb3, 0xc9, 0xa7, 0xd5, 0x80, 0x58, 0xe6, 0xa3, 0x92, 0x23,
    0xc8, 0x77, 0x6b, 0xff, 0xff, 0x93, 0x67, 0x63, 0x17, 0xad, 0x1a, 0x52, 0x65, 0xfc, 0x39, 0xf3, 0x1c, 0xed, 0xad, 0xf5,
    0x6c, 0xea, 0x67, 0x47, 0x97, 0x13, 0x0f, 0xc2, 0x4b, 0xd8, 0x7e, 0x67, 0xbd, 0x4a, 0x4c, 0xfd, 0x3f, 0xcb, 0xcc, 0x18,
    0x8b, 0xeb, 0x7f, 0xd3, 0xfa, 0xb4, 0x61, 0xc4, 0x76, 0x8a, 0x4f, 0x8c, 0x51, 0x8f, 0x37, 0xe3, 0xb1, 0xdf, 0x20, 0xd3,
    0x9a, 0xf9, 0x74, 0x59, 0xce, 0x07, 0x9c, 0xfb, 0x69, 0xed, 0xf7, 0x33, 0xe5, 0x79, 0x84, 0x3e, 0x2e, 0x58, 0x6b, 0xf5,
    0x5d, 0x64, 0xfd, 0xeb, 0x92, 0xbf, 0xc8, 0xf5, 0x1c, 0x5f, 0x8f, 0x31, 0xd7, 0x55, 0xd5, 0xe0, 0x7e, 0xa6, 0xc7, 0xac,
    0xce, 0x65, 0xfc, 0x2f, 0xb6, 0x37, 0x7f, 0x9c, 0xa3, 0xd4, 0x1d, 0xff, 0xab, 0x7e, 0x36, 0x67, 0x3a, 0x73, 0x43, 0x6f,
    0xd9, 0x63, 0x1c, 0x53, 0xb6, 0x5e, 0xc1, 0xb7, 0xd6, 0x06, 0x25, 0x47, 0x6f, 0xa1, 0x79, 0xc4, 0x3e, 0x13, 0x21, 0xe3,
    0xd7, 0x66, 0xac, 0xff, 0x31, 0xeb, 0x5f, 0x5d, 0x69, 0xae, 0x26, 0xd7, 0x1e, 0xe0, 0xf9, 0xe4, 0x5a, 0xba, 0x51, 0x58,
    0xff, 0x2a, 0xbf, 0x73, 0xef, 0x44, 0x7a, 0x4c, 0xd7, 0x65, 0xed, 0xcd, 0xf7, 0x5b, 0x72, 0xbf, 0xd0, 0x9f, 0xce, 0x19,
    0xd3, 0x9d, 0xad, 0x5c, 0xff, 0x1f, 0x67, 0x46, 0x2c, 0x5b, 0x4e, 0x0d, 0x65, 0xd7, 0xd1, 0x76, 0x9c, 0xb3, 0xb4, 0x3a,
    0xf4, 0xaf, 0xca, 0x7e, 0x65, 0xbc, 0x36, 0xdb, 0x57, 0xf6, 0x6a, 0xf5, 0xdf, 0x31, 0xb2, 0x25, 0x48, 0xb7, 0x32, 0x77,
    0xfa, 0x97, 0xd6, 0x55, 0xba, 0xf2, 0x7a, 0x56, 0xfa, 0x2f, 0xbe, 0xfe, 0xa7, 0x9e, 0xeb, 0xa7, 0xb9, 0xd4, 0xd2, 0x51,
    0x55, 0xf5, 0xeb, 0x7f, 0x66, 0xc7, 0x3c, 0x97, 0xbd, 0xea, 0xd5, 0xec, 0xf5, 0x5e, 0x89, 0xe7, 0xbd, 0xc5, 0x24, 0xfa,
    0x57, 0xa3, 0x82, 0x3f, 0x00, 0x3c, 0xcc, 0xcc, 0xb9, 0x36, 0x4a, 0xc4, 0x89, 0x46, 0xa8, 0x67, 0x04, 0x6f, 0x26, 0x9f,
    0x2e, 0x44, 0x5e, 0xff, 0x2b, 0x29, 0xc5, 0xd5, 0x4c, 0x8d, 0x34, 0xd7, 0xd1, 0xc7, 0x83, 0x46, 0x9f, 0xcf, 0x79, 0x2e,
    0x3b, 0xf5, 0xdf, 0xb4, 0x16, 0xeb, 0x04, 0xbf, 0xb3, 0x81, 0x48, 0xe3, 0xa8, 0x22, 0xeb, 0x7f, 0xf2, 0xa3, 0x2a, 0x73,
    0x94, 0xb1, 0xd8, 0xea, 0x67, 0xf7, 0xfb, 0x3f, 0xcd, 0xba, 0x06, 0xcc, 0x6f, 0xd9, 0xa9, 0x7f, 0xea, 0xbf, 0x8c, 0xfe,
    0x5b, 0x11, 0xe6, 0xff, 0xd4, 0x3f, 0xf5, 0xbf, 0x2c, 0x98, 0x9d, 0xa9, 0x35, 0x1f, 0x1a, 0x9f, 0xe8, 0x34, 0xf5, 0x3c,
    0xe7, 0xeb, 0xb2, 0xac, 0x67, 0x75, 0x59, 0x31, 0xc7, 0x85, 0xa9, 0xff, 0xe5, 0xb8, 0xce, 0xc7, 0x8a, 0xff, 0x93, 0x65,
    0x81, 0xfa, 0x5f, 0xa4, 0x51, 0x0b, 0xf5, 0x4f, 0xc2, 0x98, 0x8e, 0x6f, 0x3f, 0x8b, 0xbe, 0x12, 0x8b, 0xcc, 0x7e, 0xee,
    0xbb, 0xce, 0x16, 0x21, 0x84, 0xfa, 0x27, 0x84, 0x2c, 0x01, 0xe7, 0x32, 0xcf, 0xbc, 0xdf, 0x63, 0x8b, 0x10, 0x42, 0x08,
    0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08,
    0x21, 0x84, 0x10, 0x42, 0x08, 0x99, 0x0b, 0xf4, 0x1e, 0xfa, 0x1b, 0x91, 0xd3, 0xb5, 0x3d, 0x3b, 0xfe, 0x6b, 0x3e, 0x47,
    0x0f, 0x77, 0x3c, 0x69, 0xdc, 0xde, 0x31, 0x79, 0xd6, 0x04, 0xbb, 0xc3, 0x4e, 0xf7, 0xbf, 0x6d, 0x09, 0xd3, 0x5d, 0x73,
    0xee, 0xd4, 0xfa, 0x59, 0xc4, 0xe3, 0x6a, 0x97, 0xab, 0x91, 0x1b, 0xd6, 0xd1, 0xf8, 0xd3, 0xa1, 0x33, 0xed, 0xd0, 0xe1,
    0xbd, 0x35, 0xcb, 0x36, 0x94, 0xb4, 0x8d, 0xfa, 0xe6, 0xc3, 0x80, 0x33, 0x21, 0xaf, 0x9b, 0xce, 0xd9, 0x55, 0xd2, 0x74,
    0xfb, 0x3d, 0x89, 0xd4, 0x23, 0xe6, 0xa1, 0xd7, 0x4e, 0xdf, 0x89, 0x87, 0x70, 0x87, 0xfe, 0x90, 0x74, 0x88, 0xe8, 0x61,
    0x17, 0xba, 0x83, 0x70, 0x4c, 0xef, 0x5c, 0xc9, 0x0e, 0x10, 0xb1, 0x3d, 0x7b, 0xf3, 0xce, 0x33, 0xf6, 0xfd, 0xb9, 0x42,
    0x5d, 0xd3, 0xeb, 0x6e, 0xc3, 0xe2, 0x6e, 0xed, 0xf2, 0xa3, 0xd9, 0xeb, 0x26, 0xd9, 0x1f, 0xbb, 0x78, 0x8f, 0x75, 0xef,
    0x1e, 0xd1, 0xf4, 0x5e, 0xdb, 0x0c, 0xfd, 0x4b, 0xee, 0xff, 0xf7, 0x30, 0xc0, 0x5d, 0xe1, 0x78, 0x62, 0x0d, 0x6d, 0x5c,
    0x4c, 0xf6, 0xf6, 0xb6, 0xef, 0x5a, 0xb6, 0x29, 0xf4, 0xd8, 0x95, 0x3a, 0xab, 0xaa, 0xf2, 0x7d, 0x83, 0x16, 0xce, 0x46,
    0x38, 0x6e, 0xda, 0xa3, 0x70, 0xe4, 0x86, 0xfd, 0xd5, 0xf8, 0xd3, 0xa7, 0xce, 0xb4, 0x2e, 0x47, 0xec, 0x59, 0xb6, 0xa1,
    0xa4, 0x6d, 0xb4, 0xef, 0xf1, 0x86, 0xf7, 0x68, 0x0f, 0x8d, 0xe3, 0xcd, 0x9f, 0xad, 0x75, 0x53, 0x39, 0xab, 0xfd, 0x3b,
    0xae, 0x18, 0x7f, 0x3b, 0xed, 0xb1, 0x07, 0x99, 0x16, 0x7f, 0xbf, 0x74, 0x8f, 0x98, 0x87, 0x5e, 0x3b, 0x42, 0x3b, 0xf4,
    0xfa, 0x74, 0x1d, 0x9a, 0x0e, 0x91, 0x1d, 0x09, 0x3a, 0x15, 0x8c, 0x27, 0xda, 0xc2, 0x7b, 0x66, 0x2c, 0x67, 0xb5, 0xd0,
    0x7b, 0xa1, 0xef, 0xb8, 0x55, 0xb9, 0x26, 0xc5, 0x6c, 0xc3, 0xd0, 0xb6, 0x69, 0x55, 0x70, 0x87, 0xf7, 0xdf, 0xb1, 0xa4,
    0x2d, 0x1e, 0x5a, 0xeb, 0xf9, 0xe8, 0xb5, 0xa1, 0x0e, 0xfd, 0xad, 0xa0, 0xf1, 0xab, 0x9b, 0x15, 0x81, 0x33, 0x38, 0xf5,
    0x2f, 0xd5, 0xff, 0xa1, 0xf5, 0xfe, 0x4f, 0xfd, 0x4b, 0x5a, 0xf1, 0x83, 0xc9, 0x88, 0x6b, 0x73, 0x49, 0xf4, 0xaf, 0xea,
    0xfb, 0x22, 0x71, 0xd3, 0x77, 0x8f, 0xc3, 0x43, 0xd3, 0x21, 0xb2, 0x87, 0x7d, 0xcc, 0x74, 0xda, 0x6d, 0xfe, 0x69, 0x32,
    0x5a, 0x39, 0x51, 0x3a, 0xdd, 0x28, 0xce, 0xe2, 0x8f, 0x1e, 0x49, 0xf2, 0x2b, 0xa7, 0x7f, 0x77, 0x84, 0x4b, 0xb9, 0x6c,
    0xbe, 0x9d, 0x7c, 0xda, 0x29, 0x95, 0x4e, 0xb9, 0xe3, 0xff, 0x85, 0x21, 0x5e, 0x25, 0xa5, 0x78, 0xe9, 0xcc, 0x2f, 0x8b,
    0x3b, 0xbf, 0x27, 0x81, 0xdf, 0xaa, 0xbf, 0x3f, 0xc7, 0x65, 0x1e, 0x14, 0x8a, 0xed, 0x49, 0x47, 0x51, 0xba, 0x1c, 0x4a,
    0x5b, 0x27, 0x27, 0x67, 0xf0, 0xd0, 0x19, 0x99, 0x9d, 0xb6, 0xe4, 0x9a, 0x33, 0xda, 0x2b, 0x49, 0xd7, 0xcf, 0xb4, 0xf8,
    0x7a, 0xe9, 0x74, 0x61, 0xf3, 0xf5, 0xd8, 0xe9, 0x66, 0xa9, 0xff, 0x26, 0xa7, 0x53, 0x7f, 0x5f, 0x24, 0xbd, 0x6b, 0x1d,
    0xff, 0x4a, 0x3e, 0x7d, 0x34, 0xfe, 0xf4, 0x7e, 0x61, 0xfd, 0x17, 0x77, 0xd8, 0xac, 0x3f, 0xdd, 0xa0, 0xc6, 0x6f, 0xdf,
    0x4b, 0xda, 0x55, 0xb7, 0xf8, 0x69, 0x8f, 0xfe, 0xcd, 0x11, 0xb0, 0x5e, 0x94, 0xc8, 0xec, 0x2c, 0xd2, 0x4d, 0xef, 0xd7,
    0x9a, 0x3b, 0x35, 0xa6, 0x0b, 0x89, 0x90, 0xec, 0xa1, 0x87, 0xdb, 0x82, 0xe8, 0xcc, 0x22, 0xa4, 0xb3, 0xff, 0xf5, 0x4a,
    0xe9, 0xff, 0x20, 0x13, 0x27, 0xdc, 0x35, 0x8e, 0x70, 0x67, 0x95, 0x4e, 0xfd, 0xf7, 0x08, 0xc0, 0xaf, 0xd8, 0x35, 0xc4,
    0xaa, 0xaa, 0xfb, 0x76, 0x3b, 0xd3, 0xbe, 0x5d, 0x81, 0xfe, 0x55, 0x6d, 0xbe, 0xcd, 0xf4, 0x6c, 0xb3, 0xfe, 0xa5, 0x91,
    0xd9, 0x59, 0xa5, 0x6b, 0x06, 0xa1, 0x71, 0x87, 0x58, 0x33, 0x9f, 0x26, 0xa7, 0xab, 0x4a, 0xff, 0x4d, 0x4e, 0x57, 0x66,
    0xfe, 0x5f, 0xe6, 0xdb, 0x70, 0xfd, 0xe7, 0x23, 0x0d, 0x3d, 0xe1, 0x99, 0x19, 0x0a, 0x7d, 0x6a, 0xeb, 0x49, 0x97, 0x8d,
    0xd7, 0xe7, 0x39, 0x55, 0x79, 0x3a, 0xe5, 0xc4, 0x72, 0x43, 0xb8, 0x42, 0x62, 0xd9, 0xf4, 0xff, 0xf5, 0x78, 0xfd, 0xd4,
    0x4e, 0xf2, 0xe9, 0x5f, 0xe3, 0x4f, 0x1f, 0x50, 0xff, 0x91, 0xbf, 0x3d, 0x9d, 0xb4, 0xab, 0x6e, 0xf1, 0x8d, 0xa5, 0xd4,
    0xff, 0x2c, 0xe7, 0x7c, 0xdb, 0x11, 0xe3, 0xe6, 0x8b, 0xa4, 0xff, 0xd8, 0xf1, 0x3f, 0xea, 0xbf, 0x1b, 0x54, 0x4a, 0xea,
    0x7f, 0x16, 0xfa, 0x37, 0x3b, 0xac, 0xa8, 0xd1, 0xc3, 0x23, 0x0c, 0x71, 0x13, 0x2d, 0x6c, 0x25, 0x11, 0xd2, 0x2d, 0xeb,
    0xb8, 0x63, 0x11, 0xd2, 0x95, 0xd3, 0xff, 0x4d, 0xa3, 0x9f, 0x71, 0x3a, 0xa6, 0xb8, 0xee, 0x79, 0xf6, 0x30, 0x8b, 0x74,
    0xcd, 0xd1, 0xff, 0x46, 0x32, 0x2e, 0xdd, 0x33, 0xae, 0x99, 0xd5, 0xe9, 0xae, 0x65, 0x9e, 0xe0, 0xcc, 0xbb, 0xfe, 0xdb,
    0x46, 0x56, 0x2b, 0x4f, 0xd7, 0xf4, 0x16, 0x6a, 0x42, 0xba, 0x58, 0xeb, 0x7f, 0xf2, 0x7f, 0xd2, 0xd8, 0x43, 0x3d, 0xe9,
    0x9a, 0xa3, 0xff, 0xf0, 0x91, 0xd9, 0xbc, 0xeb, 0x7f, 0x56, 0x50, 0xff, 0x52, 0xfd, 0x7f, 0x31, 0xf6, 0x2a, 0xf9, 0xc8,
    0xd0, 0xb3, 0xfb, 0xb8, 0x9a, 0xf1, 0x33, 0x79, 0x84, 0x3e, 0x2e, 0x50, 0xff, 0xc1, 0xfa, 0xdf, 0x1f, 0xb7, 0xdf, 0xe5,
    0xa4, 0x4d, 0x57, 0x97, 0x50, 0xff, 0x9f, 0xa1, 0x9b, 0xac, 0xd3, 0xb6, 0x8d, 0x21, 0xd3, 0xe9, 0x46, 0x9c, 0x2e, 0x9d,
    0x5f, 0x5f, 0xd8, 0x87, 0x9e, 0x27, 0x2b, 0xa3, 0x35, 0x6f, 0xad, 0x35, 0x5f, 0x94, 0x74, 0xd9, 0x5e, 0x86, 0xd2, 0xef,
    0xff, 0xa4, 0x63, 0x8a, 0x6d, 0xc7, 0xea, 0xf1, 0x59, 0xa5, 0x9b, 0xbd, 0xfe, 0xa5, 0x2b, 0x5b, 0x16, 0x57, 0xff, 0xd2,
    0x37, 0x86, 0x3a, 0xc2, 0x95, 0x05, 0xd2, 0xf7, 0xe6, 0xc2, 0xef, 0x21, 0xcd, 0x5d, 0xbb, 0x12, 0x3b, 0x2e, 0x12, 0x53,
    0xff, 0x8c, 0xff, 0x51, 0xff, 0x3e, 0xbd, 0x3e, 0x4f, 0xc6, 0x40, 0x7f, 0x3a, 0x7f, 0xb1, 0x83, 0x3e, 0x7e, 0x17, 0xea,
    0xdf, 0x97, 0x9f, 0xc4, 0x8b, 0x4f, 0xfd, 0xdd, 0x4f, 0xde, 0x8c, 0xd6, 0xbc, 0xb1, 0xd6, 0x7c, 0x11, 0xd2, 0x55, 0xf1,
    0x6e, 0x14, 0xf5, 0xdf, 0x8d, 0x3c, 0x63, 0x1d, 0xbd, 0xab, 0x7f, 0x80, 0x2e, 0x8e, 0x17, 0x48, 0xff, 0xae, 0xfb, 0x52,
    0x91, 0x37, 0x95, 0xa5, 0xf9, 0x31, 0x4e, 0x40, 0xfd, 0xcf, 0x97, 0xfe, 0x5b, 0x9e, 0x9d, 0x19, 0xa8, 0x7f, 0xea, 0xbf,
    0x1e, 0xfd, 0xdf, 0x45, 0x1f, 0x77, 0xb0, 0x9d, 0xbc, 0xe5, 0x2e, 0x89, 0x70, 0x4d, 0xd9, 0x68, 0x4c, 0x3a, 0xf5, 0xdf,
    0x3f, 0x00, 0x3c, 0x34, 0xd6, 0xa3, 0xba, 0x6f, 0xcb, 0xf6, 0xc4, 0x07, 0xe8, 0x27, 0xef, 0xba, 0xf5, 0x0a, 0x47, 0x66,
    0x67, 0x95, 0xce, 0xfd, 0xb6, 0x98, 0x4c, 0xff, 0x52, 0x5d, 0x0f, 0xa9, 0xff, 0x0a, 0xf5, 0xdf, 0x0f, 0xdc, 0x93, 0x85,
    0xef, 0xff, 0xc4, 0xeb, 0x89, 0x8b, 0xf0, 0xfe, 0x0f, 0xf5, 0x3f, 0xdf, 0xfa, 0xbf, 0x8a, 0xae, 0x73, 0x7f, 0x17, 0xea,
    0x9f, 0xfa, 0x0f, 0xc3, 0xbc, 0x0e, 0x2f, 0xbb, 0x6e, 0xda, 0x3e, 0x96, 0x2b, 0x92, 0x1f, 0x21, 0x84, 0x10, 0x42, 0x08,
    0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08,
    0x21, 0x84, 0x10, 0x42, 0xfc, 0xec, 0x8c, 0xf7, 0xe1, 0x1f, 0xed, 0x6a, 0xb0, 0x62, 0x4c, 0xa3, 0x9c, 0x45, 0xb2, 0x3b,
    0xd0, 0xd9, 0xbd, 0x26, 0x1f, 0x64, 0x7c, 0xd7, 0xd6, 0xbc, 0xc7, 0x95, 0xe2, 0x2a, 0x9f, 0xe6, 0x63, 0x74, 0x70, 0x25,
    0x42, 0x7d, 0x09, 0x59, 0x16, 0x42, 0xf7, 0xa5, 0xf7, 0xbd, 0xbf, 0xd6, 0x8f, 0xb2, 0xe7, 0x63, 0xf1, 0x7d, 0x07, 0xea,
    0xf6, 0xae, 0x25, 0x64, 0x9e, 0x51, 0x3e, 0x7c, 0x6a, 0xaf, 0xce, 0xb3, 0xc9, 0xbe, 0x94, 0x67, 0xac, 0xf7, 0x7f, 0xe5,
    0x2c, 0x76, 0x2e, 0xf1, 0xb1, 0x8d, 0xe3, 0x40, 0x26, 0xf5, 0xff, 0x1b, 0xdd, 0xfb, 0xdb, 0xb8, 0xe8, 0x28, 0x9f, 0x62,
    0x13, 0x6d, 0xec, 0x63, 0x80, 0xc7, 0x9e, 0xbd, 0x26, 0x25, 0xf5, 0x25, 0x84, 0x54, 0x3b, 0x4e, 0x68, 0x35, 0xdc, 0x93,
    0x9e, 0x10, 0x92, 0x9d, 0xd7, 0x1f, 0x60, 0x1d, 0xe7, 0x1d, 0xf3, 0xfa, 0xb4, 0xfe, 0x47, 0xe3, 0x84, 0xd7, 0xd4, 0x3f,
    0x21, 0x0d, 0xd7, 0xb5, 0x24, 0x5e, 0xd7, 0x0a, 0xdc, 0x6b, 0xd2, 0xb5, 0x4f, 0x90, 0x3a, 0x92, 0x8a, 0xc1, 0xad, 0x60,
    0x7d, 0x3c, 0x02, 0x3f, 0xc2, 0x10, 0x3b, 0xa5, 0xd2, 0x5d, 0x1a, 0xbb, 0xb8, 0x9f, 0x4c, 0xdc, 0x99, 0x8e, 0x9d, 0xf9,
    0x4d, 0x31, 0xe7, 0x47, 0xc8, 0x32, 0x8d, 0xeb, 0x11, 0xbc, 0xaf, 0xbf, 0x5b, 0xff, 0x2b, 0x93, 0x71, 0xc2, 0x3f, 0x4b,
    0xb3, 0x0f, 0x2f, 0x21, 0xf3, 0x46, 0x91, 0x78, 0x9d, 0x2b, 0x0e, 0x97, 0x77, 0x49, 0x5d, 0x9e, 0x7d, 0xb8, 0x09, 0x99,
    0x37, 0x42, 0x9f, 0xeb, 0x49, 0xe3, 0x7f, 0xd4, 0x3f, 0x21, 0x8b, 0xa3, 0x7f, 0xe5, 0xf8, 0x77, 0x23, 0xb3, 0x6e, 0xe6,
    0xc0, 0xea, 0x35, 0xfd, 0x3c, 0xf3, 0x5c, 0x8f, 0xfa, 0x27, 0x64, 0xde, 0xf5, 0x1f, 0xea, 0x35, 0xdd, 0x6d, 0xa8, 0xae,
    0xa9, 0x7f, 0x42, 0xc2, 0xf5, 0xa0, 0x9c, 0x45, 0xce, 0xbd, 0xf3, 0xd4, 0xc0, 0xe6, 0x35, 0x7d, 0x3f, 0xb3, 0xae, 0x97,
    0xfa, 0x27, 0x64, 0x11, 0xe6, 0xff, 0xb3, 0x1a, 0x4f, 0x50, 0xff, 0x84, 0xcc, 0x87, 0xfe, 0xa5, 0x0e, 0x64, 0xd4, 0x3f,
    0x21, 0x8b, 0xa7, 0xff, 0x56, 0x61, 0x4f, 0x7a, 0xea, 0x9f, 0x10, 0xea, 0x9f, 0xfa, 0x27, 0x64, 0x9e, 0xf5, 0xbf, 0x08,
    0x71, 0x02, 0x42, 0xa8, 0x7f, 0xea, 0x9f, 0x90, 0xc5, 0x5e, 0xfb, 0x2f, 0x8b, 0xd7, 0xcd, 0xea, 0xb8, 0xb3, 0x4a, 0x47,
    0x08, 0xdf, 0xff, 0x69, 0xc6, 0x71, 0x9b, 0xe6, 0x90, 0x4e, 0x08, 0xf5, 0x4f, 0xfd, 0x13, 0x42, 0x08, 0x21, 0x84, 0x10,
    0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10,
    0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10,
    0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10,
    0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x21, 0x84, 0x10, 0x42, 0x08, 0x99, 0x67, 0x46, 0x7f, 0x6c, 0x07, 0x42, 0xa8,
    0x7f, 0x42, 0xc8, 0xd2, 0xe9, 0xff, 0xbf };

// Font characters rectangles data
static Rectangle default_font_recs[189] = {
    { 4, 4, 6, 25 },      { 18, 4, 3, 16 },     { 29, 4, 7, 5 },      { 44, 4, 12, 16 },    { 64, 4, 12, 22 },    { 84, 4, 12, 16 },
    { 104, 4, 12, 16 },   { 124, 4, 3, 5 },     { 135, 4, 7, 19 },    { 150, 4, 7, 19 },    { 165, 4, 7, 7 },     { 180, 4, 7, 8 },
    { 195, 4, 3, 6 },     { 206, 4, 7, 4 },     { 221, 4, 3, 3 },     { 232, 4, 12, 16 },   { 252, 4, 12, 16 },   { 272, 4, 12, 16 },
    { 292, 4, 12, 16 },   { 312, 4, 12, 16 },   { 332, 4, 12, 16 },   { 352, 4, 12, 16 },   { 372, 4, 12, 16 },   { 392, 4, 12, 16 },
    { 412, 4, 12, 16 },   { 432, 4, 12, 16 },   { 452, 4, 3, 12 },    { 463, 4, 3, 15 },    { 474, 4, 7, 12 },    { 489, 4, 7, 8 },
    { 4, 37, 7, 12 },     { 19, 37, 12, 16 },   { 39, 37, 12, 16 },   { 59, 37, 12, 16 },   { 79, 37, 12, 16 },   { 99, 37, 12, 16 },
    { 119, 37, 12, 16 },  { 139, 37, 12, 16 },  { 159, 37, 12, 16 },  { 179, 37, 12, 16 },  { 199, 37, 12, 16 },  { 219, 37, 7, 16 },
    { 234, 37, 10, 16 },  { 252, 37, 12, 16 },  { 272, 37, 12, 16 },  { 292, 37, 16, 16 },  { 316, 37, 14, 16 },  { 338, 37, 12, 16 },
    { 358, 37, 12, 16 },  { 378, 37, 12, 16 },  { 398, 37, 12, 16 },  { 418, 37, 12, 16 },  { 438, 37, 12, 16 },  { 458, 37, 12, 16 },
    { 478, 37, 12, 16 },  { 4, 70, 16, 16 },    { 28, 70, 12, 16 },   { 48, 70, 12, 16 },   { 68, 70, 12, 16 },   { 88, 70, 7, 19 },
    { 103, 70, 12, 16 },  { 123, 70, 7, 19 },   { 138, 70, 12, 7 },   { 158, 70, 7, 3 },    { 173, 70, 5, 6 },    { 186, 70, 12, 12 },
    { 206, 70, 12, 16 },  { 226, 70, 12, 12 },  { 246, 70, 12, 16 },  { 266, 70, 12, 12 },  { 286, 70, 7, 16 },   { 301, 70, 12, 17 },
    { 321, 70, 12, 16 },  { 341, 70, 3, 16 },   { 352, 70, 10, 19 },  { 370, 70, 10, 16 },  { 388, 70, 3, 16 },   { 399, 70, 16, 12 },
    { 423, 70, 12, 12 },  { 443, 70, 12, 12 },  { 463, 70, 12, 17 },  { 483, 70, 12, 17 },  { 4, 103, 10, 12 },   { 22, 103, 12, 12 },
    { 42, 103, 7, 16 },   { 57, 103, 12, 12 },  { 77, 103, 12, 12 },  { 97, 103, 16, 12 },  { 121, 103, 12, 12 }, { 141, 103, 12, 17 },
    { 161, 103, 12, 12 }, { 181, 103, 10, 19 }, { 199, 103, 3, 19 },  { 210, 103, 10, 19 }, { 228, 103, 12, 8 },  { 248, 103, 0, 0 },
    { 256, 103, 0, 0 },   { 264, 103, 0, 0 },   { 272, 103, 0, 0 },   { 280, 103, 0, 0 },   { 288, 103, 0, 0 },   { 296, 103, 0, 0 },
    { 304, 103, 0, 0 },   { 312, 103, 0, 0 },   { 320, 103, 0, 0 },   { 328, 103, 0, 0 },   { 336, 103, 0, 0 },   { 344, 103, 0, 0 },
    { 352, 103, 0, 0 },   { 360, 103, 0, 0 },   { 368, 103, 0, 0 },   { 376, 103, 0, 0 },   { 384, 103, 0, 0 },   { 392, 103, 0, 0 },
    { 400, 103, 0, 0 },   { 408, 103, 0, 0 },   { 416, 103, 0, 0 },   { 424, 103, 0, 0 },   { 432, 103, 0, 0 },   { 440, 103, 0, 0 },
    { 448, 103, 0, 0 },   { 456, 103, 0, 0 },   { 464, 103, 0, 0 },   { 472, 103, 0, 0 },   { 480, 103, 0, 0 },   { 488, 103, 0, 0 },
    { 496, 103, 0, 0 },   { 4, 136, 0, 0 },     { 12, 136, 0, 0 },    { 20, 136, 3, 17 },   { 31, 136, 12, 17 },  { 51, 136, 12, 16 },
    { 71, 136, 12, 12 },  { 91, 136, 12, 16 },  { 111, 136, 3, 19 },  { 122, 136, 12, 22 }, { 142, 136, 8, 3 },   { 158, 136, 16, 16 },
    { 182, 136, 12, 12 }, { 202, 136, 12, 12 }, { 222, 136, 7, 8 },   { 237, 136, 7, 4 },   { 252, 136, 16, 16 }, { 276, 136, 8, 3 },
    { 292, 136, 10, 10 }, { 310, 136, 7, 12 },  { 325, 136, 12, 12 }, { 345, 136, 12, 12 }, { 365, 136, 6, 6 },   { 379, 136, 12, 17 },
    { 399, 136, 12, 19 }, { 419, 136, 3, 4 },   { 430, 136, 5, 5 },   { 443, 136, 12, 12 }, { 463, 136, 12, 12 }, { 483, 136, 12, 12 },
    { 4, 169, 12, 22 },   { 24, 169, 12, 22 },  { 44, 169, 12, 22 },  { 64, 169, 12, 17 },  { 84, 169, 12, 21 },  { 104, 169, 12, 21 },
    { 124, 169, 12, 21 }, { 144, 169, 12, 21 }, { 164, 169, 12, 21 }, { 184, 169, 12, 21 }, { 204, 169, 14, 16 }, { 226, 169, 12, 21 },
    { 246, 169, 12, 21 }, { 266, 169, 12, 21 }, { 286, 169, 12, 21 }, { 306, 169, 12, 21 }, { 326, 169, 7, 21 },  { 341, 169, 7, 21 },
    { 356, 169, 7, 21 },  { 371, 169, 7, 21 },  { 386, 169, 15, 16 }, { 409, 169, 14, 21 }, { 431, 169, 12, 21 }, { 451, 169, 12, 21 },
    { 471, 169, 12, 21 }, { 491, 169, 12, 21 }, { 4, 202, 12, 21 },   { 24, 202, 12, 12 },  { 44, 202, 12, 16 },  { 64, 202, 12, 21 },
    { 84, 202, 12, 21 },  { 104, 202, 12, 21 }, { 124, 202, 12, 21 },
};

// Font glyphs info data
// NOTE: No glyphs.image data provided
static GlyphInfo default_font_glyphs[189] = {
    { 32, 0, 0, 6, { 0 }},    { 33, 0, 4, 4, { 0 }},    { 34, 0, 4, 9, { 0 }},    { 35, 0, 4, 13, { 0 }},   { 36, 0, 1, 13, { 0 }},
    { 37, 0, 4, 13, { 0 }},   { 38, 0, 4, 13, { 0 }},   { 39, 0, 4, 4, { 0 }},    { 40, 0, 4, 9, { 0 }},    { 41, 0, 4, 9, { 0 }},
    { 42, 0, 4, 9, { 0 }},    { 43, 0, 8, 9, { 0 }},    { 44, 0, 17, 4, { 0 }},   { 45, 0, 10, 9, { 0 }},   { 46, 0, 17, 4, { 0 }},
    { 47, 0, 4, 13, { 0 }},   { 48, 0, 4, 13, { 0 }},   { 49, 0, 4, 13, { 0 }},   { 50, 0, 4, 13, { 0 }},   { 51, 0, 4, 13, { 0 }},
    { 52, 0, 4, 13, { 0 }},   { 53, 0, 4, 13, { 0 }},   { 54, 0, 4, 13, { 0 }},   { 55, 0, 4, 13, { 0 }},   { 56, 0, 4, 13, { 0 }},
    { 57, 0, 4, 13, { 0 }},   { 58, 0, 8, 4, { 0 }},    { 59, 0, 8, 4, { 0 }},    { 60, 0, 6, 9, { 0 }},    { 61, 0, 8, 9, { 0 }},
    { 62, 0, 6, 9, { 0 }},    { 63, 0, 4, 13, { 0 }},   { 64, 0, 4, 13, { 0 }},   { 65, 0, 4, 13, { 0 }},   { 66, 0, 4, 13, { 0 }},
    { 67, 0, 4, 13, { 0 }},   { 68, 0, 4, 13, { 0 }},   { 69, 0, 4, 13, { 0 }},   { 70, 0, 4, 13, { 0 }},   { 71, 0, 4, 13, { 0 }},
    { 72, 0, 4, 13, { 0 }},   { 73, 0, 4, 9, { 0 }},    { 74, 0, 4, 11, { 0 }},   { 75, 0, 4, 13, { 0 }},   { 76, 0, 4, 13, { 0 }},
    { 77, 0, 4, 18, { 0 }},   { 78, 0, 4, 15, { 0 }},   { 79, 0, 4, 13, { 0 }},   { 80, 0, 4, 13, { 0 }},   { 81, 0, 4, 13, { 0 }},
    { 82, 0, 4, 13, { 0 }},   { 83, 0, 4, 13, { 0 }},   { 84, 0, 4, 13, { 0 }},   { 85, 0, 4, 13, { 0 }},   { 86, 0, 4, 13, { 0 }},
    { 87, 0, 4, 18, { 0 }},   { 88, 0, 4, 13, { 0 }},   { 89, 0, 4, 13, { 0 }},   { 90, 0, 4, 13, { 0 }},   { 91, 0, 4, 9, { 0 }},
    { 92, 0, 4, 13, { 0 }},   { 93, 0, 4, 9, { 0 }},    { 94, 0, 4, 13, { 0 }},   { 95, 0, 20, 9, { 0 }},   { 96, 2, -1, 13, { 0 }},
    { 97, 0, 8, 13, { 0 }},   { 98, 0, 4, 13, { 0 }},   { 99, 0, 8, 13, { 0 }},   { 100, 0, 4, 13, { 0 }},  { 101, 0, 8, 13, { 0 }},
    { 102, 0, 4, 9, { 0 }},   { 103, 0, 8, 13, { 0 }},  { 104, 0, 4, 13, { 0 }},  { 105, 0, 4, 4, { 0 }},   { 106, 0, 4, 11, { 0 }},
    { 107, 0, 4, 11, { 0 }},  { 108, 0, 4, 4, { 0 }},   { 109, 0, 8, 18, { 0 }},  { 110, 0, 8, 13, { 0 }},  { 111, 0, 8, 13, { 0 }},
    { 112, 0, 8, 13, { 0 }},  { 113, 0, 8, 13, { 0 }},  { 114, 0, 8, 11, { 0 }},  { 115, 0, 8, 13, { 0 }},  { 116, 0, 4, 9, { 0 }},
    { 117, 0, 8, 13, { 0 }},  { 118, 0, 8, 13, { 0 }},  { 119, 0, 8, 18, { 0 }},  { 120, 0, 8, 13, { 0 }},  { 121, 0, 8, 13, { 0 }},
    { 122, 0, 8, 13, { 0 }},  { 123, 0, 4, 11, { 0 }},  { 124, 0, 4, 4, { 0 }},   { 125, 0, 4, 11, { 0 }},  { 126, 0, 8, 13, { 0 }},
    { 127, 0, 0, 0, { 0 }},   { 128, 0, 0, 0, { 0 }},   { 129, 0, 0, 0, { 0 }},   { 130, 0, 0, 0, { 0 }},   { 131, 0, 0, 0, { 0 }},
    { 132, 0, 0, 0, { 0 }},   { 133, 0, 0, 0, { 0 }},   { 134, 0, 0, 0, { 0 }},   { 135, 0, 0, 0, { 0 }},   { 136, 0, 0, 0, { 0 }},
    { 137, 0, 0, 0, { 0 }},   { 138, 0, 0, 0, { 0 }},   { 139, 0, 0, 0, { 0 }},   { 140, 0, 0, 0, { 0 }},   { 141, 0, 0, 0, { 0 }},
    { 142, 0, 0, 0, { 0 }},   { 143, 0, 0, 0, { 0 }},   { 144, 0, 0, 0, { 0 }},   { 145, 0, 0, 0, { 0 }},   { 146, 0, 0, 0, { 0 }},
    { 147, 0, 0, 0, { 0 }},   { 148, 0, 0, 0, { 0 }},   { 149, 0, 0, 0, { 0 }},   { 150, 0, 0, 0, { 0 }},   { 151, 0, 0, 0, { 0 }},
    { 152, 0, 0, 0, { 0 }},   { 153, 0, 0, 0, { 0 }},   { 154, 0, 0, 0, { 0 }},   { 155, 0, 0, 0, { 0 }},   { 156, 0, 0, 0, { 0 }},
    { 157, 0, 0, 0, { 0 }},   { 158, 0, 0, 0, { 0 }},   { 159, 0, 0, 0, { 0 }},   { 160, 0, 0, 0, { 0 }},   { 161, 0, 6, 4, { 0 }},
    { 162, 0, 6, 13, { 0 }},  { 163, 0, 4, 13, { 0 }},  { 164, 0, 6, 13, { 0 }},  { 165, 0, 4, 13, { 0 }},  { 166, 0, 4, 4, { 0 }},
    { 167, 0, 1, 13, { 0 }},  { 168, 2, -1, 13, { 0 }}, { 169, 0, 4, 18, { 0 }},  { 170, 0, 4, 13, { 0 }},  { 171, 0, 8, 13, { 0 }},
    { 172, 0, 10, 9, { 0 }},  { 173, 0, 10, 9, { 0 }},  { 174, 0, 4, 18, { 0 }},  { 175, 2, -1, 13, { 0 }}, { 176, 0, 4, 11, { 0 }},
    { 177, 0, 8, 9, { 0 }},   { 178, 0, 4, 13, { 0 }},  { 179, 0, 4, 13, { 0 }},  { 180, 4, -1, 13, { 0 }}, { 181, 0, 8, 13, { 0 }},
    { 182, 0, 4, 13, { 0 }},  { 183, 0, 10, 4, { 0 }},  { 184, 2, 20, 13, { 0 }}, { 185, 0, 4, 13, { 0 }},  { 186, 0, 4, 13, { 0 }},
    { 187, 0, 8, 13, { 0 }},  { 188, 0, 1, 13, { 0 }},  { 189, 0, 1, 13, { 0 }},  { 190, 0, 1, 13, { 0 }},  { 191, 0, 6, 13, { 0 }},
    { 192, 0, -1, 13, { 0 }}, { 193, 0, -1, 13, { 0 }}, { 194, 0, -1, 13, { 0 }}, { 195, 0, -1, 13, { 0 }}, { 196, 0, -1, 13, { 0 }},
    { 197, 0, -1, 13, { 0 }}, { 198, 0, 4, 15, { 0 }},  { 199, 0, 4, 13, { 0 }},  { 200, 0, -1, 13, { 0 }}, { 201, 0, -1, 13, { 0 }},
    { 202, 0, -1, 13, { 0 }}, { 203, 0, -1, 13, { 0 }}, { 204, 0, -1, 9, { 0 }},  { 205, 0, -1, 9, { 0 }},  { 206, 0, -1, 9, { 0 }},
    { 207, 0, -1, 9, { 0 }},  { 208, -3, 4, 13, { 0 }}, { 209, 0, -1, 15, { 0 }}, { 210, 0, -1, 13, { 0 }}, { 211, 0, -1, 13, { 0 }},
    { 212, 0, -1, 13, { 0 }}, { 213, 0, -1, 13, { 0 }}, { 214, 0, -1, 13, { 0 }}, { 215, 0, 6, 13, { 0 }},  { 216, 0, 4, 13, { 0 }},
    { 217, 0, -1, 13, { 0 }}, { 218, 0, -1, 13, { 0 }}, { 219, 0, -1, 13, { 0 }}, { 220, 0, -1, 13, { 0 }},
};

// Font loading function: Test
static Font RuiesLoadDefaultFont(void) {
    Font font = { 0 };

    font.baseSize = 25;
    font.glyphCount = 189;
    font.glyphPadding = 4;

    // Custom font loading
    // NOTE: Compressed font image data (DEFLATE), it requires DecompressData() function
    int default_font_data_size = 0;
    unsigned char *data = DecompressData(default_font_data, COMPRESSED_DATA_SIZE_FONT_TEST, &default_font_data_size);
    Image imFont = { data, 512, 256, 1, 2 };

    // Load texture from image
    font.texture = LoadTextureFromImage(imFont);
    UnloadImage(imFont);  // Uncompressed data can be unloaded from memory

    // Assign glyph recs and info data directly
    // WARNING: This font data must not be unloaded
    font.recs = default_font_recs;
    font.glyphs = default_font_glyphs;

    return font;
}
#endif /* ifndef USE_CUSTOM_FONT */

#define MAX_ELEMENTS_COUNT     7
#define MAX_ELEMENT_ATTRIBUTES 19

typedef struct {
    uint32_t elem_styles[MAX_ELEMENTS_COUNT][MAX_ELEMENT_ATTRIBUTES];
    Font fonts[MAX_ELEMENTS_COUNT];
    float font_sizes[MAX_ELEMENTS_COUNT];
} Ruies_GlobalStyle_t;

/* Definition of types and macros for conversion */
typedef struct {
    float x;
    float y;
    float width;
    float height;
} Ruies_Rect_t;

typedef struct {
    unsigned char r;
    unsigned char g;
    unsigned char b;
    unsigned char a;
} Ruies_Color_t; 

typedef struct {
    float x;
    float y;
} Ruies_Vec2_t;

#define RUIES_RECT(rayrect)      ((Ruies_Rect_t){.x = rayrect.x, .y = rayrect.y, .width = rayrect.width, .height = rayrect.height})
#define RUIES_COLOR(raycolor)    ((Ruies_Color_t){.r = raycolor.r, .g = raycolor.g, .b = raycolor.b, .a = raycolor.a})
#define RUIES_VEC2(rayvec2)      ((Ruies_Vec2_t){.x = rayvec2.x, .y = rayvec2.y})

#define RAYLIB_RECT(ruiesrect)   ((Rectangle){.x = ruiesrect.x, .y = ruiesrect.y, .width = ruiesrect.width, .height = ruiesrect.height})
#define RAYLIB_COLOR(ruiescolor) ((Color){.r = ruiescolor.r, .g = ruiescolor.g, .b = ruiescolor.b, .a = ruiescolor.a})
#define RAYLIB_VEC2(ruiesvec2)   ((Vector2){.x = ruiesvec2.x, .y = ruiesvec2.y})
#define VEC2ADDVALUE(v, val)     ((Ruies_Vec2_t){.x = v.x + (float)val, .y = v.y + (float)val})
#define VEC2SUBVALUE(v, val)     ((Ruies_Vec2_t){.x = v.x - (float)val, .y = v.y - (float)val})
#define HEX2RUIESCOLOR(hexval)   \
    ({                                                      \
        (Ruies_Color_t) {                                   \
            .r = (unsigned char)((hexval >> 24) & 0xFF),    \
            .g = (unsigned char)((hexval >> 16) & 0xFF),    \
            .b = (unsigned char)((hexval >> 8) & 0xFF),     \
            .a = (unsigned char)((hexval) & 0xFF),          \
        };                                                  \
    })


typedef int64_t Ruies_ElemID_t;

typedef enum {
    NORMAL_BORDER = 0,
    DOUBLE_BORDER,
} Ruies_WindowBoxStyles_t;

typedef enum {
    BUTTON = 0,
    BUTTON_GRID,
    TITLEBAR,
    TOGGLE,
    LABEL,
    CELLBOX,
    WINBOX,
    ALL_ELEMENTS,
} Ruies_ElementTypes_t;

typedef enum {
    NORMAL = 0,
    FOCUSED,
    CLICKED,
} Ruies_ElemState_t;
/* Text alignment */
typedef enum {
    ALIGN_LEFT = 0,
    ALIGN_CENTER,
    ALIGN_RIGHT,
} Ruies_TextAlignment_t;

typedef enum {
    TO_THE_LEFT = 0,
    TO_THE_RIGHT,
    ON_TOP,
    TO_BOTTOM
} Ruies_ElemAttachment_t;

typedef enum {
    LEFT_SIDE = 0,
    RIGHT_SIDE,
    TOP,
    BOTTOM,
} Ruies_CellBoxSides_t;


/* Button attributes for the button_grid function */
typedef enum {
    ATTR_BORDER_COLOR_NORMAL = 0,
    ATTR_BASE_COLOR_NORMAL,
    ATTR_TEXT_COLOR_NORMAL,

    ATTR_BORDER_COLOR_FOCUSED,
    ATTR_BASE_COLOR_FOCUSED,
    ATTR_TEXT_COLOR_FOCUSED,

    ATTR_BORDER_COLOR_CLICKED,
    ATTR_BASE_COLOR_CLICKED,
    ATTR_TEXT_COLOR_CLICKED,

    ATTR_BORDER_WIDTH,
    ATTR_TEXT_ALIGNMENT,

    ATTR_LEFT_PADDING,
    ATTR_RIGHT_PADDING,
    ATTR_TOP_PADDING,
    ATTR_BOTTOM_PADDING,

    ATTR_TITLEBAR_TOP_BORDER_WIDTH,
    ATTR_TITLEBAR_BOTTOM_BORDER_WIDTH,
    ATTR_TITLEBAR_LEFT_BORDER_WIDTH,
    ATTR_TITLEBAR_RIGHT_BORDER_WIDTH,
} Ruies_ElemAttr_t;

/*------------------------------------------------------------*/
/*----------------------    ELEMENTS    ----------------------*/
/*------------------------------------------------------------*/

/* Button structure */
typedef struct {
    Ruies_ElemID_t id;
    Ruies_Rect_t bounds;
    char* text;
    Font font;
    float font_size;
    uint32_t style[MAX_ELEMENT_ATTRIBUTES];
    Ruies_ElemState_t state;
} Ruies_Button_t;

/* ButtonGrid structure */
typedef struct {
    Ruies_Button_t* buttons;
    Font font;
    float font_size;
    uint32_t rows;
    uint32_t cols;
    uint32_t origin_posx, origin_posy;
    uint32_t horizontal_spacing;
    uint32_t vertical_spacing;
    uint32_t style[MAX_ELEMENT_ATTRIBUTES];
} Ruies_ButtonGrid_t;

/* Titlebar structure */
typedef struct {
    Ruies_ElemID_t id;
    Ruies_Rect_t bounds;
    char* text;
    Font font;
    float font_size;
    uint32_t style[MAX_ELEMENT_ATTRIBUTES];
} Ruies_TitleBar_t;

/* Toggle structure */
typedef struct {
    Ruies_ElemID_t id;
    Ruies_Rect_t bounds;
    char* text;
    Font font;
    float font_size;
    uint32_t style[MAX_ELEMENT_ATTRIBUTES];
    Ruies_ElemState_t state;
} Ruies_Toggle_t;

typedef struct {
    Ruies_ElemID_t id;
    Ruies_Rect_t bounds;
    char* text;
    Font font;
    float font_size;
    uint32_t style[MAX_ELEMENT_ATTRIBUTES];
    bool is_attached;
    Ruies_ElemAttachment_t attach_to;
} Ruies_Label_t;

typedef struct {
    Ruies_ElemID_t id;
    Ruies_Rect_t bounds;
    uint32_t cell_rows;
    uint32_t cell_cols;
    uint32_t cell_margin;
    Ruies_Rect_t* cell_bounds;
    int* cell_ids;
    int number_of_inscribed_elems;
} Ruies_CellBox_t;

typedef struct {
    Ruies_ElemID_t id;
    Ruies_Rect_t bounds;
    Ruies_Color_t border_color;
    Ruies_Color_t base_color;
    uint32_t border_width;
    Ruies_ElemState_t state;
    Ruies_WindowBoxStyles_t border_style;
    uint32_t border_gap;
} Ruies_WindowBox_t;

/*------------------------------------------------------------*/
/*----------------------    TYPEDEFS    ----------------------*/
/*------------------------------------------------------------*/

/* Default values for the global style */
#define BORDER_COLOR_NORMAL  0x282C34FF
#define BASE_COLOR_NORMAL    0x98C379FF
#define TEXT_COLOR_NORMAL    0x282C34FF 
#define BORDER_COLOR_FOCUSED 0x282C34FF 
#define BASE_COLOR_FOCUSED   0x61AFEFFF
#define TEXT_COLOR_FOCUSED   0x282C34FF 
#define BORDER_COLOR_CLICKED 0x282C34FF 
#define BASE_COLOR_CLICKED   0xE5C07BFF
#define TEXT_COLOR_CLICKED   0x282C34FF 

#define NO_COLOR_VALUE       0x00000000
#define UNDEFINED_COLOR(hex) (!(hex) ? 1 : 0)     

#define __BORDER_WIDTH       1

#ifndef USE_CUSTOM_FONT
#define RUIES_FONT_FONT      RuiesLoadDefaultFont()
#define RUIES_FONT_SIZE      25                      /* Set font size */
#endif

#define RUIES_FONT           ((Font){0})

/*
 NOTE: If it's 0 than that means no error 
 *     If it's other than 0 that means error 
 *     You can check the value of using function check_rlui_error()
 * 
*/

/*-------------------------------------------------------------*/
/*-----------------   FUNCTION DECLARATIONS   -----------------*/
/*-------------------------------------------------------------*/

#ifndef USE_CUSTOM_FONT
    void ruies_load_default_font(void);
#else 
    void ruies_load_custom_font(Font font, float font_size);
#endif
void set_elem_font(Ruies_ElementTypes_t type, Font font, float font_size);

/* Error handling functions */
int check_ruies_error(void);
 
/* Element making functions */
Ruies_Button_t make_button(Ruies_Rect_t bounds, const char* text);
Ruies_TitleBar_t make_titlebar(Ruies_Rect_t bounds, const char* text);
/* NOTE: This function allocates memory for the buttons on the heap! 
 * You should call free_button_grid() after CloseWindow() */
Ruies_ButtonGrid_t make_button_grid(uint32_t posx, uint32_t posy, uint32_t rows, uint32_t cols,
                                Ruies_Rect_t sample_bounds, const char* text[],
                                uint32_t horizontal_spacing, uint32_t vertical_spacing);
Ruies_Toggle_t make_toggle(Ruies_Rect_t bounds, const char* text);
Ruies_Label_t make_label(Ruies_Rect_t bounds, const char* text, uint32_t left_padding, uint32_t right_padding);
Ruies_CellBox_t make_cellbox(Ruies_Rect_t bounds, uint32_t rows, uint32_t cols, uint32_t cell_margin);
Ruies_WindowBox_t make_window_box(Ruies_Rect_t bounds, Ruies_WindowBoxStyles_t border_style, 
                                   uint32_t border_width, uint32_t border_gap);
 
/* Cellbox releated functions */
void merge_neighbouring_cells(Ruies_CellBox_t* cellbox, Ruies_CellBoxSides_t side, int idx1);
void split_cell_horizontaly(Ruies_CellBox_t* cellbox, int idx);
void split_cell_verticaly(Ruies_CellBox_t* cellbox, int idx);
void inscribe_elem_into_cell(const void* elem, Ruies_ElementTypes_t type, Ruies_CellBox_t* cellbox, int cell_id);
/* void inscribe_elem_into_cell_relative_side(const void* elem, ElementTypes_t type, CellBox_t* cellbox, cellbox_sides_t from, int how_much, int vertical_pos); */
void insert_cellbox_into_window_box(Ruies_CellBox_t* cellbox, Ruies_WindowBox_t winbox);
void set_cellbox_cell_margin(Ruies_CellBox_t* cellbox, uint32_t cell_margin);
void calculate_cells(Ruies_CellBox_t* cellbox);
int relative_cellbox_id(int cols, int x, int y);

/* Additional ways of creating elements */
Ruies_Button_t make_button_from_button(Ruies_Button_t button, Ruies_Rect_t bounds, const char* text);
Ruies_Toggle_t make_toggle_from_toggle(Ruies_Toggle_t toggle, Ruies_Rect_t bounds, const char* text);

/* Label releated functions */
void attach_label_to_elem(const void* elem, Ruies_ElementTypes_t type, Ruies_Label_t* label, Ruies_ElemAttachment_t attach_to);

/* Style functions */
void set_global_style(Ruies_ElementTypes_t elem_type, Ruies_ElemAttr_t attr, uint32_t value);
uint32_t* get_style(Ruies_ElementTypes_t elem, int* size);
uint32_t get_style_value(Ruies_ElementTypes_t elem, Ruies_ElemAttr_t attr);
void get_style_colors(Ruies_ElemState_t state, uint32_t* style, Ruies_Color_t* border, Ruies_Color_t* base, Ruies_Color_t* text);

/* Attributes changing functions */
void set_button_style(Ruies_Button_t* button, Ruies_ElemAttr_t attr, uint32_t value);
void set_titlebar_style(Ruies_TitleBar_t* titlebar, Ruies_ElemAttr_t attr, uint32_t value);
void button_grid_attr(Ruies_ButtonGrid_t* grid, Ruies_ElemAttr_t attr, uint32_t value);
void set_toggle_style(Ruies_Toggle_t* toggle, Ruies_ElemAttr_t attr, uint32_t value);
void set_label_style(Ruies_Label_t* label, Ruies_ElemAttr_t attr, uint32_t value);
void set_cellbox_style(Ruies_CellBox_t* cellbox, Ruies_ElemAttr_t attr, uint32_t value);

/* ButtonGrid alignment functions */
void stretch_button_grid_horiz(Ruies_ButtonGrid_t* button_grid, uint32_t horizontal_spacing, uint32_t until_x);
void stretch_button_grid_verti(Ruies_ButtonGrid_t* button_grid, uint32_t vertical_spacing, uint32_t until_y);

/* Rendering functions */
void render_button(Ruies_Button_t* button);
void vrender_button(int count, ...);
void render_button_grid(Ruies_ButtonGrid_t* buttons);
void render_titlebar(Ruies_TitleBar_t titlebar);
void render_toggle(Ruies_Toggle_t* toggle);
void render_label(Ruies_Label_t* label);
void render_winbox(Ruies_WindowBox_t* winbox);

/* Internal functions for rendering */
Ruies_Vec2_t __get_elem_with_border_pos(Ruies_Rect_t bounds, uint32_t border_width);
Ruies_Vec2_t __get_elem_with_border_dims(Ruies_Rect_t bounds, uint32_t border_width);
Ruies_Vec2_t __get_elem_text_pos(Ruies_Rect_t bounds, Font font, const char* text);
Ruies_Vec2_t __get_text_pos_align(Ruies_Rect_t bounds, uint32_t left_padding, uint32_t right_padding, 
                                    Ruies_TextAlignment_t text_align, Font font, float font_size, const char* text);

/* Functions for getting elements states */
Ruies_ElemState_t get_button_state(Ruies_Button_t button, bool* active);
Ruies_ElemState_t get_toggle_state(Ruies_Toggle_t toggle, bool* active);
Ruies_ElemState_t get_winbox_state(Ruies_WindowBox_t winbox);

/* Functions for changing element states */
void __detect_button_state_change(Ruies_Button_t* button);
void __detect_toggle_state_change(Ruies_Toggle_t* toggle);
void __detect_winbox_state_change(Ruies_WindowBox_t* winbox);

int get_button_index_in_grid_by_its_id(Ruies_ButtonGrid_t button_grid, Ruies_ElemID_t id);

/* Memory management functions */
void free_button_grid(Ruies_ButtonGrid_t button_grid);
void free_cellbox(Ruies_CellBox_t cellbox);

/* Miscellaneous functions */
char* rlui_strdup(const char* str);

#ifdef RUIES_IMPLEMENTATION

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* custom variable that stores current error */
static int __ruies_error = 0;

/* variable to keep track of current element id */
static int __current_elem_idx = 0;

/* STYLE DEFINITIONS OF THE ELEMENTS */
static Ruies_GlobalStyle_t __style = {
    .elem_styles = {
        /* Button */
        {
            BORDER_COLOR_NORMAL,  BASE_COLOR_NORMAL,   TEXT_COLOR_NORMAL,  // state: NORMAL  
            BORDER_COLOR_FOCUSED, BASE_COLOR_FOCUSED,  TEXT_COLOR_FOCUSED, // state: FOCUSED
            BORDER_COLOR_CLICKED, BASE_COLOR_CLICKED,  TEXT_COLOR_CLICKED, // state: CLICKED
            __BORDER_WIDTH, ALIGN_CENTER, 
            0, 0, 0, 0,       0, 0, 0, 0
        }, 
        /* Button Grid */
        { 
            BORDER_COLOR_NORMAL, BASE_COLOR_NORMAL, TEXT_COLOR_NORMAL,     // state: NORMAL  
            BORDER_COLOR_FOCUSED, BASE_COLOR_FOCUSED, TEXT_COLOR_FOCUSED,  // state: FOCUSED
            BORDER_COLOR_CLICKED, BASE_COLOR_CLICKED, TEXT_COLOR_CLICKED,  // state: CLICKED
            __BORDER_WIDTH, ALIGN_CENTER, 
            0, 0, 0, 0,       0, 0, 0, 0
        }, 
        /* Titlebar */
        { 
            BORDER_COLOR_NORMAL, BASE_COLOR_NORMAL, TEXT_COLOR_NORMAL,     // state: NORMAL  
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                // state: FOCUSED
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                // state: CLICKED
            __BORDER_WIDTH, ALIGN_LEFT, 
            10, 0, 0, 0,      0, 0, 0, 0
        },
        /* TOGGLE */
        { 
            BORDER_COLOR_NORMAL, BASE_COLOR_NORMAL, TEXT_COLOR_NORMAL,      // state: NORMAL
            BORDER_COLOR_FOCUSED, BASE_COLOR_FOCUSED, TEXT_COLOR_FOCUSED,   // state: FOCUSED
            BORDER_COLOR_CLICKED, BASE_COLOR_CLICKED, TEXT_COLOR_CLICKED,   // state: CLICKED
            __BORDER_WIDTH, ALIGN_CENTER, 
            0, 0, 0, 0,      0, 0, 0, 0
        },
        /* LABEL */
        { 
            NO_COLOR_VALUE, NO_COLOR_VALUE, TEXT_COLOR_NORMAL,              // state: NORMAL
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                 // state: FOCUSED
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                 // state: CLICKED
            0, ALIGN_LEFT, 
            10, 0, 0, 0,      0, 0, 0, 0
        },
        /* CellBox */
        { 
            NO_COLOR_VALUE, BASE_COLOR_NORMAL, NO_COLOR_VALUE,              // state: NORMAL
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                 // state: FOCUSED
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                 // state: CLICKED
            0, 0, 
            0, 0, 0, 0,      0, 0, 0, 0
        },
        /* CellBox */
        { 
            BORDER_COLOR_NORMAL, BASE_COLOR_NORMAL, NO_COLOR_VALUE,         // state: NORMAL
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                 // state: FOCUSED
            NO_COLOR_VALUE, NO_COLOR_VALUE, NO_COLOR_VALUE,                 // state: CLICKED
            0, 0, 
            0, 0, 0, 0,      0, 0, 0, 0
        },
    }, 
    .fonts = {RUIES_FONT, RUIES_FONT, RUIES_FONT, RUIES_FONT, RUIES_FONT, RUIES_FONT, RUIES_FONT},
    #ifndef USE_CUSTOM_FONT
    .font_sizes = {RUIES_FONT_SIZE, RUIES_FONT_SIZE, RUIES_FONT_SIZE, RUIES_FONT_SIZE, RUIES_FONT_SIZE, RUIES_FONT_SIZE, RUIES_FONT_SIZE},
    #else 
    .font_sizes = {       0,               0,               0,               0,               0,               0,               0       },
    #endif
};

/* NOTE: fontloader function should be generated using raylib's ExportFontAsCode() function
 *       and you should remove the check for IsGpuReady in the .h file for this function to 
 *       correctly load your desired font 
 */

#ifndef USE_CUSTOM_FONT
    void ruies_load_default_font(void) {
        Font ruies_font = RUIES_FONT_FONT;
        for (int i = 0; i < MAX_ELEMENTS_COUNT; ++i) {
            __style.fonts[i] = ruies_font;
            __style.font_sizes[i] = RUIES_FONT_SIZE;
        }
    }
#else 
    void ruies_load_custom_font(Font font, float font_size) {
        for (int i = 0; i < MAX_ELEMENTS_COUNT; ++i) {
            __style.fonts[i] = font;
            __style.font_sizes[i] = font_size;
        }
    }
#endif

void set_elem_font(Ruies_ElementTypes_t type, Font font, float font_size) {
    if (type == ALL_ELEMENTS) {
        for (int i = 0; i < MAX_ELEMENTS_COUNT; ++i) {
            __style.fonts[i] = font;
            __style.font_sizes[i] = font_size;
        }
    } else {
        __style.fonts[type] = font;
        __style.font_sizes[type] = font_size;
    }
}

int check_ruies_error(void) {
    return __ruies_error;
}

/* Function for creation of a button */
Ruies_Button_t make_button(Ruies_Rect_t bounds, const char* text) {
    Ruies_Button_t btn = {0};
    /* Assaign a unique id to a button */
    btn.id = (!__current_elem_idx ? 0 : __current_elem_idx+1);
    btn.bounds = bounds;

    /* Check if user didn't provided any title to the function */
    if (text != NULL) {
        btn.text = rlui_strdup(text);
    } else {
        __ruies_error = 1;
        return btn;
    }

    memcpy(&btn.style, &__style.elem_styles[BUTTON], sizeof(uint32_t)*MAX_ELEMENT_ATTRIBUTES);
    btn.font = __style.fonts[BUTTON];
    btn.font_size = __style.font_sizes[BUTTON];
    btn.state = NORMAL;
    __current_elem_idx += 1;
    __ruies_error = 0;
    return btn;
}

/* Function to create a titlebar */
Ruies_TitleBar_t make_titlebar(Ruies_Rect_t bounds, const char* text) {
    Ruies_TitleBar_t titlebar = {0};
    /* Assaign an unique id to every created titlebar */
    titlebar.id = (!__current_elem_idx ? 0 : __current_elem_idx+1);
    titlebar.bounds = bounds;
    /* Check if no title was provided */
    if (text != NULL) {
        titlebar.text = rlui_strdup(text);
    } else {
        __ruies_error = 1;
        return titlebar;
    }

    memcpy(&titlebar.style, &__style.elem_styles[TITLEBAR], sizeof(uint32_t)*MAX_ELEMENT_ATTRIBUTES);
    titlebar.font = __style.fonts[TITLEBAR];
    titlebar.font_size = __style.font_sizes[TITLEBAR];
    __current_elem_idx += 1;
    __ruies_error = 0;
    return titlebar;
}

Ruies_ButtonGrid_t make_button_grid(uint32_t posx, uint32_t posy, uint32_t rows, uint32_t cols, Ruies_Rect_t sample_bounds, const char* text[], uint32_t horizontal_spacing, uint32_t vertical_spacing) {
    uint32_t num_of_buttons = rows*cols;
    Ruies_ButtonGrid_t button_grid = {0};
    button_grid.buttons = malloc(sizeof(Ruies_Button_t) * (rows*cols));

    /* Count the number of strings provided in text[] */
    uint32_t count = 0;
    while (text[count] != NULL) {
        count++;
    }
    /* If not it will free the buttons and return zeroed struct */
    /* Checks if the number of texts is equal to the number of desired buttons to be created */
    if (text == NULL || count != num_of_buttons || text[num_of_buttons] != NULL) {
        free(button_grid.buttons);
        __ruies_error = 1;
        return button_grid;
    }

    /* Replicate the properties of the original button to every button desired to be created and assaign a specific id to it */
    button_grid.font = __style.fonts[BUTTON_GRID];
    button_grid.font_size = __style.font_sizes[BUTTON_GRID];
    memcpy(&button_grid.style, &__style.elem_styles[BUTTON_GRID], sizeof(uint32_t)*MAX_ELEMENT_ATTRIBUTES);
    for (uint32_t i = 0; i < num_of_buttons; ++i) {
        button_grid.buttons[i].font_size = button_grid.font_size;
        button_grid.buttons[i].font = button_grid.font;
        button_grid.buttons[i].bounds = sample_bounds;
        memcpy(&button_grid.buttons[i].style, &button_grid.style, sizeof(uint32_t)*MAX_ELEMENT_ATTRIBUTES);
        button_grid.buttons[i].id = __current_elem_idx + 1;
        __current_elem_idx += 1;
    }
    /* Calculate the position of every button relative to the provided horizontal and vertical spacing */
    uint32_t vertical_step = 0;
    uint32_t horizontal_step = 0;
    for (uint32_t n = 0; n < num_of_buttons; ++n) {
        button_grid.buttons[n].bounds.x = posx+horizontal_step;
        button_grid.buttons[n].bounds.y = posy+vertical_step;
        horizontal_step += (sample_bounds.width+horizontal_spacing);
        if ((n+1) % cols == 0) {
            vertical_step += (sample_bounds.height+vertical_spacing);
            horizontal_step = 0;
        }
    }
    /* Assaign text to every button */
    for (uint32_t x = 0; x < num_of_buttons; ++x) {
        button_grid.buttons[x].text = rlui_strdup(text[x]);
    }
    /* Set other properties of a button array */
    button_grid.origin_posx = posx;
    button_grid.origin_posy = posy;
    button_grid.horizontal_spacing = horizontal_spacing;
    button_grid.vertical_spacing = vertical_spacing;
    button_grid.rows = rows;
    button_grid.cols = cols;
    __ruies_error = 0;
    return button_grid;
}

Ruies_Toggle_t make_toggle(Ruies_Rect_t bounds, const char* text) {
    Ruies_Toggle_t toggle = {0};
    toggle.id = (!__current_elem_idx ? 0 : __current_elem_idx+1);
    toggle.bounds = bounds;

    if (text != NULL) {
        toggle.text = rlui_strdup(text);
    } else {
        __ruies_error = 1;
        return toggle;
    }

    memcpy(&toggle.style, &__style.elem_styles[TOGGLE], sizeof(uint32_t)*MAX_ELEMENT_ATTRIBUTES);
    toggle.font = __style.fonts[TOGGLE];
    toggle.font_size = __style.font_sizes[TOGGLE];
    toggle.state = NORMAL;
    __current_elem_idx += 1;
    __ruies_error = 0;
    return toggle;
}

Ruies_Label_t make_label(Ruies_Rect_t bounds, const char* text, uint32_t left_padding, uint32_t right_padding) {
    Ruies_Label_t label = {0};
    label.id = (!__current_elem_idx ? 0 : __current_elem_idx+1);
    label.bounds = bounds;

    if (text != NULL) {
        label.text = rlui_strdup(text);
    } else {
        __ruies_error = 1;
        return label;
    }

    memcpy(&label.style, &__style.elem_styles[LABEL], sizeof(uint32_t)*MAX_ELEMENT_ATTRIBUTES);
    label.style[ATTR_LEFT_PADDING] = left_padding;
    label.style[ATTR_RIGHT_PADDING] = right_padding;
    label.font = __style.fonts[LABEL];
    label.font_size = __style.font_sizes[LABEL];
    __current_elem_idx += 1;
    __ruies_error = 0;
    return label;
}

Ruies_CellBox_t make_cellbox(Ruies_Rect_t bounds, uint32_t rows, uint32_t cols, uint32_t cell_margin) {
    Ruies_CellBox_t cellbox = {0};
    if (rows == 0 || cols == 0) {
        __ruies_error = 1;
        return cellbox;
    }
    cellbox.id = (!__current_elem_idx ? 0 : __current_elem_idx+1);
    __current_elem_idx += 1;
    cellbox.bounds = bounds;

    uint32_t size = rows*cols;
    cellbox.cell_bounds = malloc(size * sizeof(Ruies_Rect_t));
    cellbox.cell_ids = malloc(size * sizeof(int));
    cellbox.cell_margin = cell_margin;
    cellbox.cell_cols = cols;
    cellbox.cell_rows = rows;

    for (uint32_t i = 0; i < size; ++i) {
        cellbox.cell_ids[i] = i;
    }
    calculate_cells(&cellbox);

    cellbox.number_of_inscribed_elems = 0;
    __ruies_error = 0;
    return cellbox;
}

Ruies_WindowBox_t make_window_box(Ruies_Rect_t bounds, Ruies_WindowBoxStyles_t border_style, uint32_t border_width, uint32_t border_gap) {
    Ruies_WindowBox_t winbox = {0};
    winbox.id = (!__current_elem_idx ? 0 : __current_elem_idx+1);
    __current_elem_idx += 1;
    winbox.bounds = bounds;

    winbox.border_width = border_width;
    set_global_style(WINBOX, ATTR_BORDER_WIDTH, border_width);
    winbox.border_color = HEX2RUIESCOLOR(get_style_value(WINBOX, ATTR_BORDER_COLOR_NORMAL));
    winbox.base_color = HEX2RUIESCOLOR(get_style_value(WINBOX, ATTR_BASE_COLOR_NORMAL));
    winbox.border_gap = 0;
    if (border_style == DOUBLE_BORDER) {
        winbox.border_gap = border_gap;
    }
    winbox.state = NORMAL;
    winbox.border_style = border_style;
    __ruies_error = 0;
    return winbox;
}

void merge_neighbouring_cells(Ruies_CellBox_t* cellbox, Ruies_CellBoxSides_t side, int idx1);
void split_cell_horizontaly(Ruies_CellBox_t* cellbox, int idx);
void split_cell_verticaly(Ruies_CellBox_t* cellbox, int idx);

void inscribe_elem_into_cell(const void* elem, Ruies_ElementTypes_t type, Ruies_CellBox_t* cellbox, int cell_idx) {
    Ruies_Rect_t elem_bounds;
    bool found = false;
    for (uint32_t i = 0; i < cellbox->cell_cols*cellbox->cell_rows; ++i) {
        if (cellbox->cell_ids[i] == cell_idx) {
            elem_bounds = cellbox->cell_bounds[cell_idx];
            found = true;
            break;
        }
    }
    if (!found) __ruies_error = 1;
    else {
        switch (type) {
            case BUTTON:
                ((Ruies_Button_t*)elem)->bounds = elem_bounds;
                break;
            case TOGGLE:
                ((Ruies_Toggle_t*)elem)->bounds = elem_bounds;
                break;
            case TITLEBAR:
                ((Ruies_TitleBar_t*)elem)->bounds = elem_bounds;
                break;
            case LABEL:
                ((Ruies_Label_t*)elem)->bounds = elem_bounds;
                break;
            default:
                __ruies_error = 1;
                break;
        }
        cellbox->number_of_inscribed_elems++;
        __ruies_error = 0;
    }
}

void insert_cellbox_into_window_box(Ruies_CellBox_t* cellbox, Ruies_WindowBox_t winbox) {
    Ruies_Rect_t bounds;
    if (winbox.border_style == NORMAL_BORDER) {
        bounds = (Ruies_Rect_t){
            .x = winbox.bounds.x+winbox.border_width,
            .y = winbox.bounds.y+winbox.border_width,
            .width = winbox.bounds.width-(2.0f*winbox.border_width),
            .height = winbox.bounds.height-(2.0f*winbox.border_width),
        };
    } else {
        bounds = (Ruies_Rect_t){
            .x = winbox.bounds.x+winbox.border_gap+(2.0f*winbox.border_width),
            .y = winbox.bounds.y+winbox.border_gap+(2.0f*winbox.border_width),
            .width = winbox.bounds.width-((4.0f*winbox.border_width)+(2.0f*winbox.border_gap)),
            .height = winbox.bounds.height-((4.0f*winbox.border_width)+(2.0f*winbox.border_gap)),
        };
    }
    cellbox->bounds = bounds;
    calculate_cells(cellbox);
    __ruies_error = 0;
}

void set_cellbox_cell_margin(Ruies_CellBox_t* cellbox, uint32_t cell_margin) {
    cellbox->cell_margin = cell_margin;
    calculate_cells(cellbox);
    __ruies_error = 0;
}

void calculate_cells(Ruies_CellBox_t* cellbox) {
    float horizontal_step = cellbox->cell_margin;
    float vertical_step = cellbox->cell_margin;
    float horiz_div = ((cellbox->bounds.width-((cellbox->cell_cols+1)*cellbox->cell_margin))/(float)cellbox->cell_cols);
    float verti_div = ((cellbox->bounds.height-((cellbox->cell_rows+1)*cellbox->cell_margin))/(float)cellbox->cell_rows);

    for (uint32_t i = 0; i < cellbox->cell_rows*cellbox->cell_cols; ++i) {
        cellbox->cell_bounds[i].x = cellbox->bounds.x+horizontal_step;
        cellbox->cell_bounds[i].y = cellbox->bounds.y+vertical_step;
        cellbox->cell_bounds[i].width = horiz_div;
        cellbox->cell_bounds[i].height = verti_div;
        horizontal_step += (horiz_div+cellbox->cell_margin);
        if ((i+1) % cellbox->cell_cols == 0) {
            vertical_step += (verti_div+cellbox->cell_margin);
            horizontal_step = cellbox->cell_margin;
        }
    }
    __ruies_error = 0;
}

int relative_cellbox_id(int cols, int x, int y) {
    return (y*cols)+x;
}

Ruies_Button_t make_button_from_button(Ruies_Button_t button, Ruies_Rect_t bounds, const char* text) {
    Ruies_Button_t new_button;
    memcpy(&new_button, &button, sizeof(Ruies_Button_t));
    new_button.bounds = bounds;
    new_button.text = rlui_strdup(text);
    new_button.id = button.id + 1;
    __current_elem_idx += 1;
    __ruies_error = 0;
    return new_button;
}

Ruies_Toggle_t make_toggle_from_toggle(Ruies_Toggle_t toggle, Ruies_Rect_t bounds, const char* text) {
    Ruies_Toggle_t new_toggle;
    memcpy(&new_toggle, &toggle, sizeof(Ruies_Button_t));
    new_toggle.bounds = bounds;
    new_toggle.text = rlui_strdup(text);
    new_toggle.id = toggle.id + 1;
    __current_elem_idx += 1;
    __ruies_error = 0;
    return new_toggle;
}
/* Label releated functions */
void attach_label_to_elem(const void* elem, Ruies_ElementTypes_t type, Ruies_Label_t* label, Ruies_ElemAttachment_t attach_to) {
    Ruies_Rect_t elem_bounds = {0};
    switch (type) {
        case BUTTON:
            elem_bounds = (*(Ruies_Button_t*)elem).bounds;
            break;
        case TOGGLE:
            elem_bounds = (*(Ruies_Toggle_t*)elem).bounds;
            break;
        case TITLEBAR:
            elem_bounds = (*(Ruies_TitleBar_t*)elem).bounds;
            break;
        case LABEL:
            elem_bounds = (*(Ruies_Label_t*)elem).bounds;
            break;
        default:
            __ruies_error = 1;
            break;
    }
    switch (attach_to) {
        case TO_THE_LEFT:
            label->bounds.x = elem_bounds.x-label->bounds.width;
            label->bounds.y = elem_bounds.y;
            break;
        case ON_TOP:
            label->bounds.x = elem_bounds.x;
            label->bounds.y = elem_bounds.y-label->bounds.height;
            break;
        case TO_THE_RIGHT:
            label->bounds.x = elem_bounds.x+elem_bounds.width;
            label->bounds.y = elem_bounds.y;
            break;
        case TO_BOTTOM:
            label->bounds.x = elem_bounds.x;
            label->bounds.y = elem_bounds.y+elem_bounds.height;
            break;
        default:
            __ruies_error = 1;
            break;
    }
    label->is_attached = true;
}

void set_global_style(Ruies_ElementTypes_t elem_type, Ruies_ElemAttr_t attr, uint32_t value) {
    if (elem_type == ALL_ELEMENTS) {
        for (int i = 0; i < MAX_ELEMENTS_COUNT; ++i) {
            if (UNDEFINED_COLOR(__style.elem_styles[i][attr])) {
                __ruies_error = 1;
                break;
            }
            __style.elem_styles[i][attr] = value;
            __ruies_error = 0;
        }
    } else {
        if (UNDEFINED_COLOR(__style.elem_styles[elem_type][attr])) {
            __ruies_error = 1;
        } else {
            __style.elem_styles[elem_type][attr] = value;
            __ruies_error = 0;
        }
    }
}

uint32_t* get_style(Ruies_ElementTypes_t elem, int* size) {
    if (elem == ALL_ELEMENTS) {
        if (size != NULL) *size = 0;
        __ruies_error = 1;
        return NULL;
    }
    *size = sizeof(__style.elem_styles[elem])/sizeof(__style.elem_styles[elem][0]);
    __ruies_error = 0;
    return __style.elem_styles[elem];
}

uint32_t get_style_value(Ruies_ElementTypes_t elem, Ruies_ElemAttr_t attr) {
    if (elem == ALL_ELEMENTS) {
        __ruies_error = 1;
        return 0;
    }
    return __style.elem_styles[elem][attr];
}

void get_style_colors(Ruies_ElemState_t state, uint32_t* style, Ruies_Color_t* border, Ruies_Color_t* base, Ruies_Color_t* text) {
    if (border != NULL) *border = HEX2RUIESCOLOR(style[state*3]);
    if (base != NULL) *base = HEX2RUIESCOLOR(style[(state*3)+1]);
    if (text != NULL) *text = HEX2RUIESCOLOR(style[(state*3)+2]);
    __ruies_error = 0;
}

/* Function to change attributes of button */
void set_button_style(Ruies_Button_t* button, Ruies_ElemAttr_t attr, uint32_t value) {
    if (UNDEFINED_COLOR(button->style[attr])) {
        __ruies_error = 1;
    } else {
        button->style[attr] = value;
        __ruies_error = 0;
    }
}

/* Function to change attributes of the titlebar */
void set_titlebar_style(Ruies_TitleBar_t* titlebar, Ruies_ElemAttr_t attr, uint32_t value) {
    if (UNDEFINED_COLOR(titlebar->style[attr])) {
        __ruies_error = 1;
    } else {
        titlebar->style[attr] = value;
        __ruies_error = 0;
    }
}

/* Function to change the attribute of every button in a button grid */
void button_grid_attr(Ruies_ButtonGrid_t* button_grid, Ruies_ElemAttr_t attr, uint32_t value) {
    for (int i = 0; i < (button_grid->rows*button_grid->cols); ++i) {
        set_button_style(&button_grid->buttons[i], attr, value);
        if (check_ruies_error()) break;
        else __ruies_error = 0;
    }
}

void set_toggle_style(Ruies_Toggle_t* toggle, Ruies_ElemAttr_t attr, uint32_t value) {
    if (UNDEFINED_COLOR(toggle->style[attr])) {
        __ruies_error = 1;
    } else {
        toggle->style[attr] = value;
        __ruies_error = 0;
    }
}

void set_label_style(Ruies_Label_t* label, Ruies_ElemAttr_t attr, uint32_t value) {
    if (UNDEFINED_COLOR(label->style[attr])) {
        __ruies_error = 1;
    } else {
        label->style[attr] = value;
        __ruies_error = 0;
    }
}

/* Function to adjuct positions and dimensions of every button in button array so that they will stretch horizotaly to the until_x value 
 * keeping spacing the same between buttons */
void stretch_button_grid_horiz(Ruies_ButtonGrid_t* button_grid, uint32_t horizontal_spacing, uint32_t until_x) {
    uint32_t arr_sz = button_grid->rows*button_grid->cols;
    uint32_t horiz_sz = button_grid->cols;
    /* Calculates the new button width */
    uint32_t new_button_width = (((until_x-button_grid->origin_posx)-((horiz_sz-1)*horizontal_spacing))/horiz_sz);
    for (int i = 0; i < arr_sz; ++i) {
        /* Updates the position of every button that is not the first in a row and that it refrences the previous positions to change 
         * the current button position to make the distance between buttons the same */
        if (i % horiz_sz != 0) {
            button_grid->buttons[i].bounds.x = button_grid->buttons[i-1].bounds.x+new_button_width+horizontal_spacing;
        } 
        /* Set the width of every button to the new width */
        button_grid->buttons[i].bounds.width = new_button_width;
    }
    button_grid->horizontal_spacing = horizontal_spacing;
    __ruies_error = 0;
}

/* Function to adjuct positions and dimensions of every button in button array so that they will stretch vertiacaly to the until_y value 
 * keeping spacing the same between buttons */
void stretch_button_grid_verti(Ruies_ButtonGrid_t* button_grid, uint32_t vertical_spacing, uint32_t until_y) {
    uint32_t arr_sz = button_grid->rows*button_grid->cols;
    uint32_t verti_sz = button_grid->rows;
    /* Calculate the new height of every button */
    uint32_t new_button_height = (((until_y-button_grid->origin_posy)-((verti_sz-1)*vertical_spacing))/verti_sz);
    uint32_t refrence_point = 0;
    /* Set the new verical position to the array original position */
    uint32_t new_pos_y = button_grid->origin_posy;
    for (int i = 0; i < arr_sz; ++i) {
        /* Update the refrence_point */
        if (i % button_grid->cols == 0 && i != 0) {
            refrence_point += new_button_height+vertical_spacing;
            new_pos_y = button_grid->origin_posy+refrence_point;
        } 
        button_grid->buttons[i].bounds.y = new_pos_y;
        button_grid->buttons[i].bounds.height = new_button_height;
    }
    button_grid->vertical_spacing = vertical_spacing;
    __ruies_error = 0;
}

/* Function for rendering a button */
void render_button(Ruies_Button_t* button) {
    __detect_button_state_change(button);
    Ruies_Color_t border_color, base_color, text_color;
    Ruies_Vec2_t border_bounds[2] = {
        /* Position */
        __get_elem_with_border_pos(button->bounds, button->style[ATTR_BORDER_WIDTH]),
        /* Dimension */
        __get_elem_with_border_dims(button->bounds, button->style[ATTR_BORDER_WIDTH]),
    };
    Ruies_Vec2_t text_pos = __get_elem_text_pos(button->bounds, button->font, button->text);
    get_style_colors(button->state, button->style, &border_color, &base_color, &text_color);
    /* Drawing */
    DrawRectangleRec(RAYLIB_RECT(button->bounds), RAYLIB_COLOR(border_color));
    DrawRectangleV(RAYLIB_VEC2(border_bounds[0]), RAYLIB_VEC2(border_bounds[1]), RAYLIB_COLOR(base_color));
    DrawTextEx(button->font, button->text, RAYLIB_VEC2(text_pos), button->font_size, 0, RAYLIB_COLOR(text_color));
    __ruies_error = 0;
}

/* Function to render a variadic number of buttons */
void vrender_button(int count, ...) {
    va_list ap;
    va_start(ap, count);
    for (int i = 0; i < count; ++i) {
        render_button(va_arg(ap, Ruies_Button_t*));
    }
    va_end(ap);
    __ruies_error = 0;
}

/* Function to render a button array */
void render_button_grid(Ruies_ButtonGrid_t* buttons) {
    for (int i = 0; i < (buttons->cols*buttons->rows); ++i) {
        render_button(&buttons->buttons[i]);
    }
    __ruies_error = 0;
}

/* Function to render a titlebar */
void render_titlebar(Ruies_TitleBar_t titlebar) {
    Ruies_Vec2_t text_pos = __get_text_pos_align(titlebar.bounds, titlebar.style[ATTR_LEFT_PADDING], titlebar.style[ATTR_RIGHT_PADDING], 
                                            (Ruies_TextAlignment_t)titlebar.style[ATTR_TEXT_ALIGNMENT], titlebar.font, titlebar.font_size, 
                                            titlebar.text);
    int64_t left_border_width = titlebar.style[ATTR_TITLEBAR_LEFT_BORDER_WIDTH];
    int64_t right_border_width = titlebar.style[ATTR_TITLEBAR_RIGHT_BORDER_WIDTH];
    int64_t top_border_width = titlebar.style[ATTR_TITLEBAR_TOP_BORDER_WIDTH];
    int64_t bottom_border_width = titlebar.style[ATTR_TITLEBAR_BOTTOM_BORDER_WIDTH];

    Ruies_Color_t border_color_normal = HEX2RUIESCOLOR(titlebar.style[ATTR_BORDER_COLOR_NORMAL]);

    DrawRectangleRec(RAYLIB_RECT(titlebar.bounds), RAYLIB_COLOR(HEX2RUIESCOLOR(titlebar.style[ATTR_BASE_COLOR_NORMAL])));
    if (left_border_width > 0) {
        DrawRectangle(titlebar.bounds.x, titlebar.bounds.y, left_border_width, 
                      titlebar.bounds.height, RAYLIB_COLOR(border_color_normal));
    }
    if (right_border_width > 0) {
        DrawRectangle(titlebar.bounds.x+(titlebar.bounds.width-right_border_width), titlebar.bounds.y, left_border_width, 
                      titlebar.bounds.height, RAYLIB_COLOR(border_color_normal));
    }
    if (top_border_width > 0) {
        DrawRectangle(titlebar.bounds.x, titlebar.bounds.y, titlebar.bounds.width, 
                      top_border_width, RAYLIB_COLOR(border_color_normal));
    }
    if (bottom_border_width > 0) {
        DrawRectangle(titlebar.bounds.x, titlebar.bounds.y+(titlebar.bounds.height-bottom_border_width), titlebar.bounds.width, 
                      bottom_border_width, RAYLIB_COLOR(border_color_normal));
    }
    DrawTextEx(titlebar.font, titlebar.text, RAYLIB_VEC2(text_pos), titlebar.font_size, 0, RAYLIB_COLOR(HEX2RUIESCOLOR(titlebar.style[ATTR_TEXT_COLOR_NORMAL])));
    __ruies_error = 0;
}

void render_toggle(Ruies_Toggle_t* toggle) {
    __detect_toggle_state_change(toggle);
    Ruies_Color_t border_color, base_color, text_color;
    Ruies_Vec2_t border_bounds[2] = {
        /* Position */
        __get_elem_with_border_pos(toggle->bounds, toggle->style[ATTR_BORDER_WIDTH]),
        /* Dimension */
        __get_elem_with_border_dims(toggle->bounds, toggle->style[ATTR_BORDER_WIDTH]),
    };
    Ruies_Vec2_t text_pos = __get_elem_text_pos(toggle->bounds, toggle->font, toggle->text);
    get_style_colors(toggle->state, toggle->style, &border_color, &base_color, &text_color);
    /* Drawing */
    DrawRectangleRec(RAYLIB_RECT(toggle->bounds), RAYLIB_COLOR(border_color));
    DrawRectangleV(RAYLIB_VEC2(border_bounds[0]), RAYLIB_VEC2(border_bounds[1]), RAYLIB_COLOR(base_color));
    DrawTextEx(toggle->font, toggle->text, RAYLIB_VEC2(text_pos), toggle->font_size, 0, RAYLIB_COLOR(text_color));
    __ruies_error = 0;
}

void render_label(Ruies_Label_t* label) {
    Ruies_Vec2_t text_pos = __get_text_pos_align(label->bounds, label->style[ATTR_LEFT_PADDING], 
                                            label->style[ATTR_RIGHT_PADDING], (Ruies_TextAlignment_t)label->style[ATTR_TEXT_ALIGNMENT],
                                            label->font, label->font_size, label->text);
    Ruies_Color_t text_color = RUIES_COLOR(HEX2RUIESCOLOR(label->style[ATTR_TEXT_COLOR_NORMAL]));
    /* Drawing */
    DrawTextEx(label->font, label->text, RAYLIB_VEC2(text_pos), label->font_size, 0, RAYLIB_COLOR(text_color));
    __ruies_error = 0;
}

void render_winbox(Ruies_WindowBox_t* winbox) {
    __detect_winbox_state_change(winbox);
    Ruies_Vec2_t border_pos[2] = {
        __get_elem_with_border_pos(winbox->bounds, winbox->border_width),
        __get_elem_with_border_dims(winbox->bounds, winbox->border_width),
    };
    DrawRectangleRec(RAYLIB_RECT(winbox->bounds), RAYLIB_COLOR(winbox->border_color));
    DrawRectangleV(RAYLIB_VEC2(border_pos[0]), RAYLIB_VEC2(border_pos[1]), RAYLIB_COLOR(winbox->base_color));
    if (winbox->border_style == DOUBLE_BORDER) {
        DrawRectangleV(RAYLIB_VEC2(VEC2ADDVALUE(border_pos[0], winbox->border_gap)), RAYLIB_VEC2(VEC2SUBVALUE(border_pos[1], 2.0f*winbox->border_gap)), 
                      RAYLIB_COLOR(winbox->border_color));
        DrawRectangleV(RAYLIB_VEC2(VEC2ADDVALUE(border_pos[0], winbox->border_gap+winbox->border_width)),
                       RAYLIB_VEC2(VEC2SUBVALUE(border_pos[1], 2.0f*(winbox->border_width+winbox->border_gap))), RAYLIB_COLOR(winbox->base_color));
    }
    __ruies_error = 0;
}

/* Internal function to calculate the position of the boundsagle relative to border width */
Ruies_Vec2_t __get_elem_with_border_pos(Ruies_Rect_t bounds, uint32_t border_width) {
    Ruies_Vec2_t border_pos = {0};
    border_pos.x = bounds.x+(float)border_width;
    border_pos.y = bounds.y+(float)border_width;
    __ruies_error = 0;
    return border_pos;
}

/* Internal functin to calculate the dimensions of the boundsagle relative to border width */
Ruies_Vec2_t __get_elem_with_border_dims(Ruies_Rect_t bounds, uint32_t border_width) {
    Ruies_Vec2_t border_dims = {0};
    border_dims.x = bounds.width-(2.0f*(float)border_width);
    border_dims.y = bounds.height-(2.0f*(float)border_width);
    __ruies_error = 0;
    return border_dims;
}

/* Internal function to calculate the text position of a button */
Ruies_Vec2_t __get_elem_text_pos(Ruies_Rect_t bounds, Font font, const char* text) {
    Ruies_Vec2_t text_pos = {0};
    text_pos.x = bounds.x+((bounds.width-MeasureTextEx(font, text, font.baseSize, 0).x)/2.0f);
    text_pos.y = bounds.y+((bounds.height-MeasureTextEx(font, text, font.baseSize, 0).y)/2.0f);
    __ruies_error = 0;
    return text_pos;
}

Ruies_Vec2_t __get_text_pos_align(Ruies_Rect_t bounds, uint32_t left_padding, uint32_t right_padding, 
                             Ruies_TextAlignment_t text_align, Font font, float font_size, const char* text) {
    Ruies_Vec2_t text_pos = {0};
    Ruies_Vec2_t text_dims = RUIES_VEC2(MeasureTextEx(font, text, font_size, 0));
    /* Calculates the distance from the sides */
    switch (text_align) {
        case ALIGN_LEFT:
            text_pos.x = (bounds.x+(float)left_padding);
            text_pos.y = (bounds.y+((bounds.height-text_dims.y)/2.0f));
            break;
        case ALIGN_CENTER:
            text_pos.x = (bounds.x+((bounds.width-text_dims.x)/2.0f));
            text_pos.y = (bounds.y+((bounds.height-text_dims.y)/2.0f));
            break;
        case ALIGN_RIGHT:
            text_pos.x = (bounds.width-text_dims.x-(float)right_padding);
            text_pos.y = (bounds.y+((bounds.height-text_dims.y)/2.0f));
            break;
        default:
            __ruies_error = 1;
            break;
    }
    __ruies_error = 0;
    return text_pos;
}

Ruies_ElemState_t get_button_state(Ruies_Button_t button, bool* active) {
    if (button.state == CLICKED) {
        if (active != NULL) *active = true;
    } else {
        if (active != NULL) *active = false;
    }
    __ruies_error = 0;
    return button.state;
}

Ruies_ElemState_t get_toggle_state(Ruies_Toggle_t toggle, bool* active) {
    if (toggle.state == CLICKED) { 
        if (active != NULL) *active = true;
    } else {
        if (active != NULL) *active = false;
    }
    __ruies_error = 0;
    return toggle.state;
}

Ruies_ElemState_t get_winbox_state(Ruies_WindowBox_t winbox) {
    return winbox.state;
}

/* Functions for changing element states */
void __detect_button_state_change(Ruies_Button_t* button) {
    bool hover = CheckCollisionPointRec(GetMousePosition(), RAYLIB_RECT(button->bounds));
    bool clicked = IsMouseButtonDown(0);
    if (!hover && !clicked) {
        button->state = NORMAL;
    } else if (hover && !clicked) {
        button->state = FOCUSED;
    } else if (hover && clicked) {
        button->state = CLICKED;
    }
    __ruies_error = 0;
}

void __detect_toggle_state_change(Ruies_Toggle_t* toggle) {
    bool hover = CheckCollisionPointRec(GetMousePosition(), RAYLIB_RECT(toggle->bounds));
    bool clicked = IsMouseButtonPressed(0);
    if (!hover && !clicked && toggle->state != CLICKED) {
        toggle->state = NORMAL;
    } else if (hover && !clicked && toggle->state != CLICKED) {
        toggle->state = FOCUSED;
    } else if (hover && clicked && toggle->state != CLICKED) {
        toggle->state = CLICKED;
    } else if (hover && clicked && toggle->state == CLICKED) {
        toggle->state = NORMAL;
    }
    __ruies_error = 0;
}

void __detect_winbox_state_change(Ruies_WindowBox_t* winbox) {
    bool hover = CheckCollisionPointRec(GetMousePosition(), RAYLIB_RECT(winbox->bounds));
    bool clicked = IsMouseButtonDown(0);
    if (!hover && !clicked) {
        winbox->state = NORMAL;
    } else if (hover && !clicked) {
        winbox->state = FOCUSED;
    } else if (hover && clicked) {
        winbox->state = CLICKED;
    }
    __ruies_error = 0;
}

int get_button_index_in_grid_by_its_idx(Ruies_ButtonGrid_t button_grid, Ruies_ElemID_t idx) {
    for (uint32_t i = 0; i < button_grid.cols*button_grid.rows; ++i) {
        if (button_grid.buttons[i].id == idx) {
            __ruies_error = 0;
            return i;
        } 
    }
    __ruies_error = 1;
    return -1;
}
/* Free the buttons in a Ruies_ButtonGrid_t */
void free_button_grid(Ruies_ButtonGrid_t button_grid) {
    free(button_grid.buttons);
    __ruies_error = 0;
}

void free_cellbox(Ruies_CellBox_t cellbox) {
    free(cellbox.cell_ids);
    free(cellbox.cell_bounds);
    __ruies_error = 0;
}

/* Custom strdup function */
char* rlui_strdup(const char* str) {
    size_t len = strlen(str) + 1;
    char* n_str = malloc(len);
    if (str) {
        memcpy(n_str, str, len);
    }
    return n_str;
}
#endif /* RUIES_IMPLEMENTATION */
#endif /* RUIES_H_ */
